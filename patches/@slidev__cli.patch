diff --git a/dist/chunk-3JQYTPPL.js b/dist/chunk-3JQYTPPL.js
index e2f29713bc0992a3b0d83ecec7a7b344c2dcacd5..72e3f54aa87f9c1cf253a9f87c727558c1322812 100644
--- a/dist/chunk-3JQYTPPL.js
+++ b/dist/chunk-3JQYTPPL.js
@@ -5,7 +5,7 @@ import {
   resolveEntry,
   resolveImportPath,
   resolveImportUrl,
-  toAtFS
+  toAtFS,
 } from "./chunk-UNQ5DBLZ.js";
 
 // package.json
@@ -16,21 +16,25 @@ import { join } from "node:path";
 import fs from "fs-extra";
 import { satisfies } from "semver";
 var officialThemes = {
-  "none": "",
-  "default": "@slidev/theme-default",
-  "seriph": "@slidev/theme-seriph",
+  none: "",
+  default: "@slidev/theme-default",
+  seriph: "@slidev/theme-seriph",
   "apple-basic": "@slidev/theme-apple-basic",
-  "shibainu": "@slidev/theme-shibainu",
-  "bricks": "@slidev/theme-bricks"
+  shibainu: "@slidev/theme-shibainu",
+  bricks: "@slidev/theme-bricks",
 };
 var resolveTheme = createResolver("theme", officialThemes);
 async function getThemeMeta(name, root) {
   const path4 = join(root, "package.json");
-  if (!fs.existsSync(path4))
-    return {};
+  if (!fs.existsSync(path4)) return {};
   const { slidev = {}, engines = {} } = await fs.readJSON(path4);
-  if (engines.slidev && !satisfies(version, engines.slidev, { includePrerelease: true }))
-    throw new Error(`[slidev] theme "${name}" requires Slidev version range "${engines.slidev}" but found "${version}"`);
+  if (
+    engines.slidev &&
+    !satisfies(version, engines.slidev, { includePrerelease: true })
+  )
+    throw new Error(
+      `[slidev] theme "${name}" requires Slidev version range "${engines.slidev}" but found "${version}"`
+    );
   return slidev;
 }
 
@@ -54,24 +58,39 @@ async function resolveAddons(addonsInConfig) {
   const resolveAddonNameAndRoot = createResolver("addon", {});
   async function resolveAddon(name, parent) {
     const [, pkgRoot] = await resolveAddonNameAndRoot(name, parent);
-    if (!pkgRoot)
-      return;
+    if (!pkgRoot) return;
     resolved.push(pkgRoot);
-    const { slidev = {}, engines = {} } = await fs2.readJSON(resolve(pkgRoot, "package.json"));
-    if (engines.slidev && !satisfies2(version, engines.slidev, { includePrerelease: true }))
-      throw new Error(`[slidev] addon "${name}" requires Slidev version range "${engines.slidev}" but found "${version}"`);
+    const { slidev = {}, engines = {} } = await fs2.readJSON(
+      resolve(pkgRoot, "package.json")
+    );
+    if (
+      engines.slidev &&
+      !satisfies2(version, engines.slidev, { includePrerelease: true })
+    )
+      throw new Error(
+        `[slidev] addon "${name}" requires Slidev version range "${engines.slidev}" but found "${version}"`
+      );
     if (Array.isArray(slidev.addons))
-      await Promise.all(slidev.addons.map((addon) => resolveAddon(addon, pkgRoot)));
+      await Promise.all(
+        slidev.addons.map((addon) => resolveAddon(addon, pkgRoot))
+      );
   }
   if (Array.isArray(addonsInConfig))
-    await Promise.all(addonsInConfig.map((addon) => resolveAddon(addon, userRoot)));
+    await Promise.all(
+      addonsInConfig.map((addon) => resolveAddon(addon, userRoot))
+    );
   if (Array.isArray(userPkgJson.slidev?.addons))
-    await Promise.all(userPkgJson.slidev.addons.map((addon) => resolveAddon(addon, userRoot)));
+    await Promise.all(
+      userPkgJson.slidev.addons.map((addon) => resolveAddon(addon, userRoot))
+    );
   return resolved;
 }
 
 // node/setups/indexHtml.ts
-import { existsSync as existsSync8, readFileSync as readFileSync2 } from "node:fs";
+import {
+  existsSync as existsSync8,
+  readFileSync as readFileSync2,
+} from "node:fs";
 import { join as join13 } from "node:path";
 import { slash as slash4 } from "@antfu/utils";
 import { white, yellow as yellow2 } from "kolorist";
@@ -85,8 +104,11 @@ import { loadConfigFromFile, mergeConfig as mergeConfig2 } from "vite";
 
 // node/syntax/markdown-it/markdown-it-link.ts
 function MarkdownItLink(md) {
-  const defaultRender = md.renderer.rules.link_open ?? ((tokens, idx, options, _env, self) => self.renderToken(tokens, idx, options));
-  md.renderer.rules.link_open = function(tokens, idx, options, env, self) {
+  const defaultRender =
+    md.renderer.rules.link_open ??
+    ((tokens, idx, options, _env, self) =>
+      self.renderToken(tokens, idx, options));
+  md.renderer.rules.link_open = function (tokens, idx, options, env, self) {
     const token = tokens[idx];
     const hrefIndex = token.attrIndex("href");
     const attr = token.attrs?.[hrefIndex];
@@ -117,11 +139,31 @@ function loadModule(absolutePath) {
   return jiti.import(absolutePath);
 }
 function stringifyMarkdownTokens(tokens) {
-  return tokens.map((token) => token.children?.filter((t) => ["text", "code_inline"].includes(t.type) && !t.content.match(/^\s*$/)).map((t) => t.content.trim()).join(" ")).filter(Boolean).join(" ");
+  return tokens
+    .map((token) =>
+      token.children
+        ?.filter(
+          (t) =>
+            ["text", "code_inline"].includes(t.type) &&
+            !t.content.match(/^\s*$/)
+        )
+        .map((t) => t.content.trim())
+        .join(" ")
+    )
+    .filter(Boolean)
+    .join(" ");
 }
 function generateGoogleFontsUrl(options) {
-  const weights = options.weights.flatMap((i) => options.italic ? [`0,${i}`, `1,${i}`] : [`${i}`]).sort().join(";");
-  const fonts = options.webfonts.map((i) => `family=${i.replace(/^(['"])(.*)\1$/, "$1").replace(/\s+/g, "+")}:${options.italic ? "ital," : ""}wght@${weights}`).join("&");
+  const weights = options.weights
+    .flatMap((i) => (options.italic ? [`0,${i}`, `1,${i}`] : [`${i}`]))
+    .sort()
+    .join(";");
+  const fonts = options.webfonts
+    .map(
+      (i) =>
+        `family=${i.replace(/^(['"])(.*)\1$/, "$1").replace(/\s+/g, "+")}:${options.italic ? "ital," : ""}wght@${weights}`
+    )
+    .join("&");
   return `https://fonts.googleapis.com/css2?${fonts}&display=swap`;
 }
 function updateFrontmatterPatch(slide, frontmatter) {
@@ -140,19 +182,20 @@ function updateFrontmatterPatch(slide, frontmatter) {
       let found = false;
       YAML.visit(doc.contents, {
         Pair(_key, node, path4) {
-          if (path4.length === 1 && YAML.isScalar(node.key) && node.key.value === key) {
+          if (
+            path4.length === 1 &&
+            YAML.isScalar(node.key) &&
+            node.key.value === key
+          ) {
             node.value = valueNode;
             found = true;
             return YAML.visit.BREAK;
           }
-        }
+        },
       });
       if (!found) {
-        if (!YAML.isMap(doc.contents))
-          doc.contents = doc.createNode({});
-        doc.contents.add(
-          doc.createPair(key, valueNode)
-        );
+        if (!YAML.isMap(doc.contents)) doc.contents = doc.createNode({});
+        doc.contents.add(doc.createPair(key, valueNode));
       }
     }
   }
@@ -160,7 +203,7 @@ function updateFrontmatterPatch(slide, frontmatter) {
 function getBodyJson(req) {
   return new Promise((resolve9, reject) => {
     let body = "";
-    req.on("data", (chunk) => body += chunk);
+    req.on("data", (chunk) => (body += chunk));
     req.on("error", reject);
     req.on("end", () => {
       try {
@@ -180,15 +223,13 @@ function createVueCompilerFlagsPlugin(options) {
     name: "slidev:flags",
     enforce: "pre",
     transform(code, id) {
-      if (!id.match(/\.vue($|\?)/) && !id.includes("?vue&"))
-        return;
+      if (!id.match(/\.vue($|\?)/) && !id.includes("?vue&")) return;
       const original = code;
       define.forEach(([from, to]) => {
         code = code.replaceAll(from, to);
       });
-      if (original !== code)
-        return code;
-    }
+      if (original !== code) return code;
+    },
   };
 }
 
@@ -201,18 +242,20 @@ function createComponentsPlugin({ clientRoot, roots }, pluginOptions) {
     extensions: ["vue", "md", "js", "ts", "jsx", "tsx"],
     dirs: [
       join2(clientRoot, "builtin"),
-      ...roots.map((i) => join2(i, "components"))
+      ...roots.map((i) => join2(i, "components")),
     ],
     include: [/\.vue$/, /\.vue\?vue/, /\.vue\?v=/, /\.md$/, /\.md\?vue/],
     exclude: [],
     resolvers: [
       IconsResolver({
         prefix: "",
-        customCollections: Object.keys(pluginOptions.icons?.customCollections || [])
-      })
+        customCollections: Object.keys(
+          pluginOptions.icons?.customCollections || []
+        ),
+      }),
     ],
     dts: false,
-    ...pluginOptions.components
+    ...pluginOptions.components,
   });
 }
 
@@ -229,20 +272,30 @@ function createContextInjectionPlugin() {
   return {
     name: "slidev:context-injection",
     async transform(code, id) {
-      if (!id.endsWith(".vue") || id.includes("/@slidev/client/") || id.includes("/packages/client/"))
+      if (
+        !id.endsWith(".vue") ||
+        id.includes("/@slidev/client/") ||
+        id.includes("/packages/client/")
+      )
         return;
-      if (code.includes(templateInjectionMarker) || code.includes("useSlideContext()"))
+      if (
+        code.includes(templateInjectionMarker) ||
+        code.includes("useSlideContext()")
+      )
         return code;
       const imports = [
         templateImportContextUtils,
         templateInitContext,
-        templateInjectionMarker
+        templateInjectionMarker,
       ];
       const matchScript = code.match(/<script((?!setup).)*(setup)?.*>/);
       if (matchScript && matchScript[2]) {
-        return code.replace(/(<script.*>)/g, `$1
+        return code.replace(
+          /(<script.*>)/g,
+          `$1
 ${imports.join("\n")}
-`);
+`
+        );
       } else if (matchScript && !matchScript[2]) {
         const matchExport = code.match(/export\s+default\s+\{/);
         if (matchExport) {
@@ -250,7 +303,8 @@ ${imports.join("\n")}
           let component = code.slice(exportIndex);
           component = component.slice(0, component.indexOf("</script>"));
           const scriptIndex = (matchScript.index || 0) + matchScript[0].length;
-          const provideImport = '\nimport { injectionSlidevContext } from "@slidev/client/constants.ts"\n';
+          const provideImport =
+            '\nimport { injectionSlidevContext } from "@slidev/client/constants.ts"\n';
           code = `${code.slice(0, scriptIndex)}${provideImport}${code.slice(scriptIndex)}`;
           let injectIndex = exportIndex + provideImport.length;
           let injectObject = "$slidev: { from: injectionSlidevContext },";
@@ -258,10 +312,15 @@ ${imports.join("\n")}
           if (matchInject) {
             injectIndex += (matchInject.index || 0) + matchInject[0].length;
             if (matchInject[1] === "[") {
-              let injects = component.slice((matchInject.index || 0) + matchInject[0].length);
+              let injects = component.slice(
+                (matchInject.index || 0) + matchInject[0].length
+              );
               const injectEndIndex = injects.indexOf("]");
               injects = injects.slice(0, injectEndIndex);
-              injectObject += injects.split(",").map((inject) => `${inject}: {from: ${inject}}`).join(",");
+              injectObject += injects
+                .split(",")
+                .map((inject) => `${inject}: {from: ${inject}}`)
+                .join(",");
               return `${code.slice(0, injectIndex - 1)}{
 ${injectObject}
 }${code.slice(injectIndex + injectEndIndex + 1)}`;
@@ -280,7 +339,7 @@ ${code.slice(injectIndex)}`;
 ${imports.join("\n")}
 </script>
 ${code}`;
-    }
+    },
   };
 }
 
@@ -297,9 +356,11 @@ var INCLUDE_GLOBAL = [
   "prettier",
   "recordrtc",
   "typescript",
-  "yaml"
+  "yaml",
 ];
-var INCLUDE_LOCAL = INCLUDE_GLOBAL.map((i) => `@slidev/cli > @slidev/client > ${i}`);
+var INCLUDE_LOCAL = INCLUDE_GLOBAL.map(
+  (i) => `@slidev/cli > @slidev/client > ${i}`
+);
 var EXCLUDE_GLOBAL = [
   "@antfu/utils",
   "@shikijs/monaco",
@@ -328,19 +389,21 @@ var EXCLUDE_GLOBAL = [
   "shiki/core",
   "vue-demi",
   "vue-router",
-  "vue"
-];
-var EXCLUDE_LOCAL = EXCLUDE_GLOBAL;
-var ASYNC_MODULES = [
-  "file-saver",
   "vue",
-  "@vue"
 ];
+var EXCLUDE_LOCAL = EXCLUDE_GLOBAL;
+var ASYNC_MODULES = ["file-saver", "vue", "@vue"];
 function createConfigPlugin(options) {
   const resolveClientDep = createResolve({
     // Same as Vite's default resolve conditions
-    conditions: ["import", "module", "browser", "default", options.mode === "build" ? "production" : "development"],
-    url: pathToFileURL(options.clientRoot)
+    conditions: [
+      "import",
+      "module",
+      "browser",
+      "default",
+      options.mode === "build" ? "production" : "development",
+    ],
+    url: pathToFileURL(options.clientRoot),
   });
   return {
     name: "slidev:config",
@@ -351,41 +414,50 @@ function createConfigPlugin(options) {
           alias: [
             {
               find: /^@slidev\/client$/,
-              replacement: `${toAtFS(options.clientRoot)}/index.ts`
+              replacement: `${toAtFS(options.clientRoot)}/index.ts`,
             },
             {
               find: /^@slidev\/client\/(.*)/,
-              replacement: `${toAtFS(options.clientRoot)}/$1`
+              replacement: `${toAtFS(options.clientRoot)}/$1`,
             },
             {
               find: /^#slidev\/(.*)/,
-              replacement: "/@slidev/$1"
+              replacement: "/@slidev/$1",
             },
             {
               find: "vue",
-              replacement: await resolveImportPath("vue/dist/vue.esm-bundler.js", true)
+              replacement: await resolveImportPath(
+                "vue/dist/vue.esm-bundler.js",
+                true
+              ),
             },
-            ...isInstalledGlobally.value ? await Promise.all(INCLUDE_GLOBAL.map(async (dep) => ({
-              find: dep,
-              replacement: fileURLToPath2(await resolveClientDep(dep))
-            }))) : []
+            ...(isInstalledGlobally.value
+              ? await Promise.all(
+                  INCLUDE_GLOBAL.map(async (dep) => ({
+                    find: dep,
+                    replacement: fileURLToPath2(await resolveClientDep(dep)),
+                  }))
+                )
+              : []),
           ],
-          dedupe: ["vue"]
-        },
-        optimizeDeps: isInstalledGlobally.value ? {
-          exclude: EXCLUDE_GLOBAL,
-          include: INCLUDE_GLOBAL
-        } : {
-          // We need to specify the full deps path for non-hoisted modules
-          exclude: EXCLUDE_LOCAL,
-          include: INCLUDE_LOCAL
+          dedupe: ["vue"],
         },
+        optimizeDeps: isInstalledGlobally.value
+          ? {
+              exclude: EXCLUDE_GLOBAL,
+              include: INCLUDE_GLOBAL,
+            }
+          : {
+              // We need to specify the full deps path for non-hoisted modules
+              exclude: EXCLUDE_LOCAL,
+              include: INCLUDE_LOCAL,
+            },
         css: {
           postcss: {
             plugins: [
-              await import("postcss-nested").then((r) => (r.default || r)())
-            ]
-          }
+              await import("postcss-nested").then((r) => (r.default || r)()),
+            ],
+          },
         },
         server: {
           fs: {
@@ -394,10 +466,12 @@ function createConfigPlugin(options) {
               options.userWorkspaceRoot,
               options.clientRoot,
               // Special case for PNPM global installation
-              isInstalledGlobally.value ? slash(options.cliRoot).replace(/\/\.pnpm\/.*$/gi, "") : options.cliRoot,
-              ...options.roots
-            ])
-          }
+              isInstalledGlobally.value
+                ? slash(options.cliRoot).replace(/\/\.pnpm\/.*$/gi, "")
+                : options.cliRoot,
+              ...options.roots,
+            ]),
+          },
         },
         publicDir: join3(options.userRoot, "public"),
         build: {
@@ -405,32 +479,50 @@ function createConfigPlugin(options) {
             output: {
               chunkFileNames(chunkInfo) {
                 const DEFAULT = "assets/[name]-[hash].js";
-                if (chunkInfo.name.includes("/"))
-                  return DEFAULT;
-                if (chunkInfo.moduleIds.filter((i) => isSlidevClient(i)).length > chunkInfo.moduleIds.length * 0.6)
+                if (chunkInfo.name.includes("/")) return DEFAULT;
+                if (
+                  chunkInfo.moduleIds.filter((i) => isSlidevClient(i)).length >
+                  chunkInfo.moduleIds.length * 0.6
+                )
                   return "assets/slidev/[name]-[hash].js";
-                if (chunkInfo.moduleIds.filter((i) => i.match(/\/monaco-editor(-core)?\//)).length > chunkInfo.moduleIds.length * 0.6)
+                if (
+                  chunkInfo.moduleIds.filter((i) =>
+                    i.match(/\/monaco-editor(-core)?\//)
+                  ).length >
+                  chunkInfo.moduleIds.length * 0.6
+                )
                   return "assets/monaco/[name]-[hash].js";
                 return DEFAULT;
               },
               manualChunks(id) {
-                if (id.startsWith("/@slidev-monaco-types/") || id.includes("/@slidev/monaco-types") || id.endsWith("?monaco-types&raw"))
+                if (
+                  id.startsWith("/@slidev-monaco-types/") ||
+                  id.includes("/@slidev/monaco-types") ||
+                  id.endsWith("?monaco-types&raw")
+                )
                   return "monaco/bundled-types";
                 if (id.includes("/shiki/") || id.includes("/@shikijs/"))
                   return `modules/shiki`;
-                if (id.startsWith("~icons/"))
-                  return "modules/unplugin-icons";
-                const matchedAsyncModule = ASYNC_MODULES.find((i) => id.includes(`/node_modules/${i}`));
+                if (id.startsWith("~icons/")) return "modules/unplugin-icons";
+                const matchedAsyncModule = ASYNC_MODULES.find((i) =>
+                  id.includes(`/node_modules/${i}`)
+                );
                 if (matchedAsyncModule)
                   return `modules/${matchedAsyncModule.replace("@", "").replace("/", "-")}`;
-              }
-            }
-          }
+              },
+            },
+          },
         },
-        cacheDir: isInstalledGlobally.value ? join3(options.cliRoot, "node_modules/.vite") : void 0
+        cacheDir: isInstalledGlobally.value
+          ? join3(options.cliRoot, "node_modules/.vite")
+          : void 0,
       };
       function isSlidevClient(id) {
-        return id.includes("/@slidev/") || id.includes("/slidev/packages/client/") || id.includes("/@vueuse/");
+        return (
+          id.includes("/@slidev/") ||
+          id.includes("/slidev/packages/client/") ||
+          id.includes("/@vueuse/")
+        );
       }
       return mergeConfig(injection, config);
     },
@@ -446,7 +538,7 @@ function createConfigPlugin(options) {
           next();
         });
       };
-    }
+    },
   };
 }
 
@@ -455,10 +547,9 @@ function createHmrPatchPlugin() {
   return {
     name: "slidev:hmr-patch",
     transform(code, id) {
-      if (!id.match(regexSlideSourceId))
-        return;
+      if (!id.match(regexSlideSourceId)) return;
       return code.replace("if (_rerender_only)", "if (false)");
-    }
+    },
   };
 }
 
@@ -468,19 +559,18 @@ function createIconsPlugin(options, pluginOptions) {
   return Icons({
     defaultClass: "slidev-icon",
     collectionsNodeResolvePath: options.utils.iconsResolvePath,
-    ...pluginOptions.icons
+    ...pluginOptions.icons,
   });
 }
 
 // node/vite/inspect.ts
 async function createInspectPlugin(options, pluginOptions) {
-  if (!options.inspect)
-    return;
+  if (!options.inspect) return;
   const { default: PluginInspect } = await import("vite-plugin-inspect");
   return PluginInspect({
     dev: true,
     build: true,
-    ...pluginOptions.inspect
+    ...pluginOptions.inspect,
   });
 }
 
@@ -491,24 +581,34 @@ function createLayoutWrapperPlugin({ data, utils }) {
     name: "slidev:layout-wrapper",
     async transform(code, id) {
       const match = id.match(regexSlideSourceId);
-      if (!match)
-        return;
+      if (!match) return;
       const [, no, type] = match;
-      if (type !== "md")
-        return;
+      if (type !== "md") return;
       const index = +no - 1;
       const layouts = utils.getLayouts();
-      const rawLayoutName = data.slides[index]?.frontmatter?.layout ?? data.slides[0]?.frontmatter?.defaults?.layout;
+      const rawLayoutName =
+        data.slides[index]?.frontmatter?.layout ??
+        data.slides[0]?.frontmatter?.defaults?.layout;
       let layoutName = rawLayoutName || (index === 0 ? "cover" : "default");
       if (!layouts[layoutName]) {
-        console.error(red(`
-Unknown layout "${bold(layoutName)}".${yellow(" Available layouts are:")}`) + Object.keys(layouts).map((i, idx) => (idx % 3 === 0 ? "\n    " : "") + gray(i.padEnd(15, " "))).join("  "));
+        console.error(
+          red(`
+Unknown layout "${bold(layoutName)}".${yellow(" Available layouts are:")}`) +
+            Object.keys(layouts)
+              .map(
+                (i, idx) =>
+                  (idx % 3 === 0 ? "\n    " : "") + gray(i.padEnd(15, " "))
+              )
+              .join("  ")
+        );
         console.error();
         layoutName = "default";
       }
       const setupTag = code.match(/^<script setup.*>/m);
       if (!setupTag)
-        throw new Error(`[Slidev] Internal error: <script setup> block not found in slide ${index + 1}.`);
+        throw new Error(
+          `[Slidev] Internal error: <script setup> block not found in slide ${index + 1}.`
+        );
       const templatePart = code.slice(0, setupTag.index);
       const scriptPart = code.slice(setupTag.index);
       const bodyStart = templatePart.indexOf("<template>") + 10;
@@ -528,9 +628,9 @@ ${body}
         templateInitContext,
         "$clicksContext.setup()",
         templateInjectionMarker,
-        scriptPart.slice(setupTag[0].length)
+        scriptPart.slice(setupTag[0].length),
       ].join("\n");
-    }
+    },
   };
 }
 
@@ -548,12 +648,11 @@ var templateConfigs = {
     const config = {
       ...data.config,
       remote,
-      slidesTitle: getSlideTitle(data)
+      slidesTitle: getSlideTitle(data),
     };
-    if (isString(config.info))
-      config.info = sharedMd.render(config.info);
+    if (isString(config.info)) config.info = sharedMd.render(config.info);
     return `export default ${JSON.stringify(config)}`;
-  }
+  },
 };
 
 // node/virtual/deprecated.ts
@@ -562,9 +661,9 @@ var templateLegacyRoutes = {
   getContent() {
     return [
       `export { slides } from '#slidev/slides'`,
-      `console.warn('[slidev] #slidev/routes is deprecated, use #slidev/slides instead')`
+      `console.warn('[slidev] #slidev/routes is deprecated, use #slidev/slides instead')`,
     ].join("\n");
-  }
+  },
 };
 var templateLegacyTitles = {
   id: "/@slidev/titles.md",
@@ -578,7 +677,7 @@ console.warn('/@slidev/titles.md is deprecated, import from #slidev/title-render
 
 <TitleRenderer :no="no" />
 `;
-  }
+  },
 };
 
 // node/virtual/global-layers.ts
@@ -590,14 +689,27 @@ var templateGlobalLayers = {
     const imports = [];
     let n = 0;
     function getComponent(names) {
-      const components = roots.flatMap((root) => names.map((name) => join4(root, name))).filter((i) => existsSync(i));
-      imports.push(components.map((path4, i) => `import __n${n}_${i} from '${toAtFS(path4)}'`).join("\n"));
+      const components = roots
+        .flatMap((root) => names.map((name) => join4(root, name)))
+        .filter((i) => existsSync(i));
+      imports.push(
+        components
+          .map((path4, i) => `import __n${n}_${i} from '${toAtFS(path4)}'`)
+          .join("\n")
+      );
       const render = components.map((_, i) => `h(__n${n}_${i})`).join(",");
       n++;
       return `{ render: () => [${render}] }`;
     }
-    const globalTop = getComponent(["global.vue", "global-top.vue", "GlobalTop.vue"]);
-    const globalBottom = getComponent(["global-bottom.vue", "GlobalBottom.vue"]);
+    const globalTop = getComponent([
+      "global.vue",
+      "global-top.vue",
+      "GlobalTop.vue",
+    ]);
+    const globalBottom = getComponent([
+      "global-bottom.vue",
+      "GlobalBottom.vue",
+    ]);
     const slideTop = getComponent(["slide-top.vue", "SlideTop.vue"]);
     const slideBottom = getComponent(["slide-bottom.vue", "SlideBottom.vue"]);
     return [
@@ -606,9 +718,9 @@ var templateGlobalLayers = {
       `export const GlobalTop = ${globalTop}`,
       `export const GlobalBottom = ${globalBottom}`,
       `export const SlideTop = ${slideTop}`,
-      `export const SlideBottom = ${slideBottom}`
+      `export const SlideBottom = ${slideBottom}`,
     ].join("\n");
-  }
+  },
 };
 
 // node/virtual/layouts.ts
@@ -617,20 +729,19 @@ var templateLayouts = {
   id: "/@slidev/layouts",
   getContent({ utils }) {
     const imports = [];
-    const layouts = objectMap(
-      utils.getLayouts(),
-      (k, v) => {
-        imports.push(`import __layout_${k} from "${toAtFS(v)}"`);
-        return [k, `__layout_${k}`];
-      }
-    );
+    const layouts = objectMap(utils.getLayouts(), (k, v) => {
+      imports.push(`import __layout_${k} from "${toAtFS(v)}"`);
+      return [k, `__layout_${k}`];
+    });
     return [
       imports.join("\n"),
       `export default {
-${Object.entries(layouts).map(([k, v]) => `"${k}": ${v}`).join(",\n")}
-}`
+${Object.entries(layouts)
+  .map(([k, v]) => `"${k}": ${v}`)
+  .join(",\n")}
+}`,
     ].join("\n\n");
-  }
+  },
 };
 
 // node/virtual/monaco-deps.ts
@@ -639,16 +750,18 @@ import { uniq as uniq2 } from "@antfu/utils";
 var templateMonacoRunDeps = {
   id: "/@slidev/monaco-run-deps",
   async getContent({ userRoot, data }) {
-    if (!data.features.monaco)
-      return "";
-    const deps = uniq2(data.features.monaco.deps.concat(data.config.monacoTypesAdditionalPackages));
+    if (!data.features.monaco) return "";
+    const deps = uniq2(
+      data.features.monaco.deps.concat(
+        data.config.monacoTypesAdditionalPackages
+      )
+    );
     const importerPath = resolve2(userRoot, "./snippets/__importer__.ts");
     let result = "";
     for (let i = 0; i < deps.length; i++) {
       const specifier = deps[i];
       const resolved = await this.resolve(specifier, importerPath);
-      if (!resolved)
-        continue;
+      if (!resolved) continue;
       result += `import * as vendored${i} from ${JSON.stringify(resolved.id)}
 `;
     }
@@ -658,7 +771,7 @@ var templateMonacoRunDeps = {
 `;
     result += "}\n";
     return result;
-  }
+  },
 };
 
 // node/virtual/monaco-types.ts
@@ -669,10 +782,11 @@ import fg from "fast-glob";
 var templateMonacoTypes = {
   id: "/@slidev/monaco-types",
   getContent: async ({ userRoot, data, utils }) => {
-    if (!data.features.monaco)
-      return "";
+    if (!data.features.monaco) return "";
     const typesRoot = join5(userRoot, "snippets");
-    const files = await fg(["**/*.ts", "**/*.mts", "**/*.cts"], { cwd: typesRoot });
+    const files = await fg(["**/*.ts", "**/*.mts", "**/*.cts"], {
+      cwd: typesRoot,
+    });
     let result = 'import { addFile } from "@slidev/client/setup/monaco.ts"\n';
     for (const file of files) {
       const url = `${toAtFS(resolve3(typesRoot, file))}?monaco-types&raw`;
@@ -680,12 +794,13 @@ var templateMonacoTypes = {
 `;
     }
     function mapModuleNameToModule(moduleSpecifier) {
-      if (moduleSpecifier.startsWith("node:"))
-        return "node";
-      if (builtinModules.includes(moduleSpecifier))
-        return "node";
+      if (moduleSpecifier.startsWith("node:")) return "node";
+      if (builtinModules.includes(moduleSpecifier)) return "node";
       const mainPackageName = moduleSpecifier.split("/")[0];
-      if (builtinModules.includes(mainPackageName) && !mainPackageName.startsWith("@"))
+      if (
+        builtinModules.includes(mainPackageName) &&
+        !mainPackageName.startsWith("@")
+      )
         return "node";
       const [a = "", b = ""] = moduleSpecifier.split("/");
       const moduleName = a.startsWith("@") ? `${a}/${b}` : a;
@@ -694,18 +809,21 @@ var templateMonacoTypes = {
     let deps = [...data.config.monacoTypesAdditionalPackages];
     if (data.config.monacoTypesSource === "local")
       deps.push(...data.features.monaco.types);
-    deps = uniq3(deps.map((specifier) => {
-      if (specifier[0] === ".")
-        return "";
-      return mapModuleNameToModule(specifier);
-    }).filter(Boolean));
+    deps = uniq3(
+      deps
+        .map((specifier) => {
+          if (specifier[0] === ".") return "";
+          return mapModuleNameToModule(specifier);
+        })
+        .filter(Boolean)
+    );
     deps = deps.filter((pkg) => !utils.isMonacoTypesIgnored(pkg));
     for (const pkg of deps) {
       result += `import(${JSON.stringify(`/@slidev-monaco-types/resolve?${new URLSearchParams({ pkg })}`)})
 `;
     }
     return result;
-  }
+  },
 };
 
 // node/virtual/nav-controls.ts
@@ -714,20 +832,24 @@ import { join as join6 } from "node:path";
 var templateNavControls = {
   id: "/@slidev/custom-nav-controls",
   getContent({ roots }) {
-    const components = roots.flatMap((root) => {
-      return [
-        join6(root, "custom-nav-controls.vue"),
-        join6(root, "CustomNavControls.vue")
-      ];
-    }).filter((i) => existsSync2(i));
-    const imports = components.map((i, idx) => `import __n${idx} from '${toAtFS(i)}'`).join("\n");
+    const components = roots
+      .flatMap((root) => {
+        return [
+          join6(root, "custom-nav-controls.vue"),
+          join6(root, "CustomNavControls.vue"),
+        ];
+      })
+      .filter((i) => existsSync2(i));
+    const imports = components
+      .map((i, idx) => `import __n${idx} from '${toAtFS(i)}'`)
+      .join("\n");
     const render = components.map((i, idx) => `h(__n${idx})`).join(",");
     return `${imports}
 import { h } from 'vue'
 export default {
   render: () => [${render}],
 }`;
-  }
+  },
 };
 
 // node/virtual/setups.ts
@@ -737,20 +859,34 @@ function createSetupTemplate(name) {
   return {
     id: `/@slidev/setups/${name}`,
     getContent({ roots }) {
-      const setups = roots.flatMap((i) => {
-        const path4 = join7(i, "setup", name);
-        return [".ts", ".mts", ".js", ".mjs"].map((ext) => path4 + ext);
-      }).filter((i) => existsSync3(i));
+      const setups = roots
+        .flatMap((i) => {
+          const path4 = join7(i, "setup", name);
+          return [".ts", ".mts", ".js", ".mjs"].map((ext) => path4 + ext);
+        })
+        .filter((i) => existsSync3(i));
       const imports = [];
       setups.forEach((path4, idx) => {
         imports.push(`import __n${idx} from '${toAtFS(path4)}'`);
       });
-      imports.push(`export default [${setups.map((_, idx) => `__n${idx}`).join(",")}]`);
+      imports.push(
+        `export default [${setups.map((_, idx) => `__n${idx}`).join(",")}]`
+      );
       return imports.join("\n");
-    }
+    },
   };
 }
-var setupModules = ["shiki", "code-runners", "monaco", "mermaid", "main", "root", "routes", "shortcuts", "context-menu"];
+var setupModules = [
+  "shiki",
+  "code-runners",
+  "monaco",
+  "mermaid",
+  "main",
+  "root",
+  "routes",
+  "shortcuts",
+  "context-menu",
+];
 var templateSetups = setupModules.map(createSetupTemplate);
 
 // node/virtual/shiki.ts
@@ -759,32 +895,79 @@ var templateShiki = {
   id: "/@slidev/shiki",
   getContent: async ({ utils }) => {
     const options = utils.shikiOptions;
-    const langs = await resolveLangs(options.langs || ["markdown", "vue", "javascript", "typescript", "html", "css"]);
-    const resolvedThemeOptions = "themes" in options ? {
-      themes: Object.fromEntries(await Promise.all(
-        Object.entries(options.themes).map(async ([name, value]) => [name, await resolveTheme2(value)])
-      ))
-    } : {
-      theme: await resolveTheme2(options.theme || "vitesse-dark")
-    };
-    const themes = resolvedThemeOptions.themes ? Object.values(resolvedThemeOptions.themes) : [resolvedThemeOptions.theme];
-    const themeOptionsNames = resolvedThemeOptions.themes ? { themes: Object.fromEntries(Object.entries(resolvedThemeOptions.themes).map(([name, value]) => [name, typeof value === "string" ? value : value.name])) } : { theme: typeof resolvedThemeOptions.theme === "string" ? resolvedThemeOptions.theme : resolvedThemeOptions.theme.name };
+    const langs = await resolveLangs(
+      options.langs || [
+        "markdown",
+        "vue",
+        "javascript",
+        "typescript",
+        "html",
+        "css",
+      ]
+    );
+    const resolvedThemeOptions =
+      "themes" in options
+        ? {
+            themes: Object.fromEntries(
+              await Promise.all(
+                Object.entries(options.themes).map(async ([name, value]) => [
+                  name,
+                  await resolveTheme2(value),
+                ])
+              )
+            ),
+          }
+        : {
+            theme: await resolveTheme2(options.theme || "vitesse-dark"),
+          };
+    const themes = resolvedThemeOptions.themes
+      ? Object.values(resolvedThemeOptions.themes)
+      : [resolvedThemeOptions.theme];
+    const themeOptionsNames = resolvedThemeOptions.themes
+      ? {
+          themes: Object.fromEntries(
+            Object.entries(resolvedThemeOptions.themes).map(([name, value]) => [
+              name,
+              typeof value === "string" ? value : value.name,
+            ])
+          ),
+        }
+      : {
+          theme:
+            typeof resolvedThemeOptions.theme === "string"
+              ? resolvedThemeOptions.theme
+              : resolvedThemeOptions.theme.name,
+        };
     async function normalizeGetter(p) {
       const r = typeof p === "function" ? p() : p;
       return r.default || r;
     }
     async function resolveLangs(langs2) {
-      const awaited = await Promise.all(langs2.map((lang) => normalizeGetter(lang)));
+      const awaited = await Promise.all(
+        langs2.map((lang) => normalizeGetter(lang))
+      );
       return uniq4(awaited.flat());
     }
     async function resolveTheme2(theme) {
       return typeof theme === "string" ? theme : await normalizeGetter(theme);
     }
     const langsInit = await Promise.all(
-      langs.map(async (lang) => typeof lang === "string" ? `import('${await resolveImportUrl(`shiki/langs/${lang}.mjs`)}')` : JSON.stringify(lang))
+      langs.map(async (lang) =>
+        typeof lang === "string"
+          ? `import('${await resolveImportUrl(`shiki/langs/${lang}.mjs`)}')`
+          : JSON.stringify(lang)
+      )
+    );
+    const themesInit = await Promise.all(
+      themes.map(async (theme) =>
+        typeof theme === "string"
+          ? `import('${await resolveImportUrl(`shiki/themes/${theme}.mjs`)}')`
+          : JSON.stringify(theme)
+      )
+    );
+    const langNames = langs.flatMap((lang) =>
+      typeof lang === "string" ? lang : lang.name
     );
-    const themesInit = await Promise.all(themes.map(async (theme) => typeof theme === "string" ? `import('${await resolveImportUrl(`shiki/themes/${theme}.mjs`)}')` : JSON.stringify(theme)));
-    const langNames = langs.flatMap((lang) => typeof lang === "string" ? lang : lang.name);
     const lines = [];
     lines.push(
       `import { createHighlighterCore } from "${await resolveImportUrl("shiki/core")}"`,
@@ -811,7 +994,7 @@ var templateShiki = {
       "}"
     );
     return lines.join("\n");
-  }
+  },
 };
 
 // node/virtual/slides.ts
@@ -831,7 +1014,7 @@ var templateSlides = {
       `  loadingComponent: SlideLoading,`,
       `  errorComponent: SlideError,`,
       `  onError: e => console.error('Failed to load slide ' + (idx + 1), e) `,
-      `})`
+      `})`,
     ];
     const slides = data.slides.map((_, idx) => {
       const no = idx + 1;
@@ -856,9 +1039,9 @@ ${slides.join(",\n")}
       `  import.meta.hot.dispose(() => componentsCache.length = 0)`,
       `  import.meta.hot.accept()`,
       `}`,
-      `export const slides = import.meta.hot ? import.meta.hot.data.slides : shallowRef(data)`
+      `export const slides = import.meta.hot ? import.meta.hot.data.slides : shallowRef(data)`,
     ].join("\n");
-  }
+  },
 };
 
 // node/virtual/styles.ts
@@ -875,7 +1058,7 @@ var templateStyle = {
       `import "${resolveUrlOfClient("styles/index.css")}"`,
       `import "${resolveUrlOfClient("styles/code.css")}"`,
       `import "${resolveUrlOfClient("styles/katex.css")}"`,
-      `import "${resolveUrlOfClient("styles/transitions.css")}"`
+      `import "${resolveUrlOfClient("styles/transitions.css")}"`,
     ];
     for (const root of roots) {
       const styles = [
@@ -883,7 +1066,7 @@ var templateStyle = {
         join8(root, "styles", "index.js"),
         join8(root, "styles", "index.css"),
         join8(root, "styles.css"),
-        join8(root, "style.css")
+        join8(root, "style.css"),
       ];
       for (const style of styles) {
         if (existsSync4(style)) {
@@ -893,7 +1076,9 @@ var templateStyle = {
       }
     }
     if (data.features.katex)
-      imports.push(`import "${await resolveImportUrl("katex/dist/katex.min.css")}"`);
+      imports.push(
+        `import "${await resolveImportUrl("katex/dist/katex.min.css")}"`
+      );
     if (data.config.highlighter === "shiki") {
       imports.push(
         `import "${await resolveImportUrl("@shikijs/vitepress-twoslash/style.css")}"`,
@@ -909,18 +1094,23 @@ var templateStyle = {
     );
     imports.push('import "uno.css"');
     return imports.join("\n");
-  }
+  },
 };
 
 // node/virtual/titles.ts
 var templateTitleRendererMd = {
   id: "/@slidev/title-renderer.md",
   getContent({ data }) {
-    const lines = data.slides.map(({ title }, i) => `<template ${i === 0 ? "v-if" : "v-else-if"}="no === ${i + 1}">
+    const lines = data.slides.map(
+      (
+        { title },
+        i
+      ) => `<template ${i === 0 ? "v-if" : "v-else-if"}="no === ${i + 1}">
 
 ${title}
 
-</template>`);
+</template>`
+    );
     lines.push(
       `<script setup lang="ts">`,
       `import { useSlideContext } from '@slidev/client/context.ts'`,
@@ -931,13 +1121,13 @@ ${title}
       `</script>`
     );
     return lines.join("\n");
-  }
+  },
 };
 var templateTitleRenderer = {
   id: "/@slidev/title-renderer",
   async getContent() {
     return 'export { default } from "/@slidev/title-renderer.md"';
-  }
+  },
 };
 
 // node/virtual/index.ts
@@ -956,7 +1146,7 @@ var templates = [
   ...templateSetups,
   // Deprecated
   templateLegacyRoutes,
-  templateLegacyTitles
+  templateLegacyTitles,
 ];
 
 // node/vite/loaders.ts
@@ -973,7 +1163,7 @@ function renderNote(text = "") {
 function withRenderedNote(data) {
   return {
     ...data,
-    noteHTML: renderNote(data?.note)
+    noteHTML: renderNote(data?.note),
   };
 }
 function createSlidesLoader(options, serverOptions) {
@@ -985,24 +1175,25 @@ function createSlidesLoader(options, serverOptions) {
   function resolveSourceIds(data2) {
     const ids = {
       md: [],
-      frontmatter: []
+      frontmatter: [],
     };
     for (const type of ["md", "frontmatter"]) {
       for (let i = 0; i < data2.slides.length; i++) {
-        ids[type].push(`${data2.slides[i].source.filepath}__slidev_${i + 1}.${type}`);
+        ids[type].push(
+          `${data2.slides[i].source.filepath}__slidev_${i + 1}.${type}`
+        );
       }
     }
     return ids;
   }
   function updateServerWatcher() {
-    if (!server)
-      return;
+    if (!server) return;
     server.watcher.add(Object.keys(data.watchFiles));
   }
   function getFrontmatter(pageNo) {
     return {
-      ...data.headmatter?.defaults || {},
-      ...data.slides[pageNo]?.frontmatter || {}
+      ...(data.headmatter?.defaults || {}),
+      ...(data.slides[pageNo]?.frontmatter || {}),
     };
   }
   return {
@@ -1013,8 +1204,7 @@ function createSlidesLoader(options, serverOptions) {
       updateServerWatcher();
       server.middlewares.use(async (req, res, next) => {
         const match = req.url?.match(regexSlideReqPath);
-        if (!match)
-          return next();
+        if (!match) return next();
         const [, no] = match;
         const idx = Number.parseInt(no) - 1;
         if (req.method === "GET") {
@@ -1025,29 +1215,28 @@ function createSlidesLoader(options, serverOptions) {
           const slide = data.slides[idx];
           if (body.content && body.content !== slide.source.content)
             hmrSlidesIndexes.add(idx);
-          if (body.content)
-            slide.content = slide.source.content = body.content;
+          if (body.content) slide.content = slide.source.content = body.content;
           if (body.frontmatterRaw != null) {
             if (body.frontmatterRaw.trim() === "") {
-              slide.source.frontmatterDoc = slide.source.frontmatterStyle = void 0;
+              slide.source.frontmatterDoc = slide.source.frontmatterStyle =
+                void 0;
             } else {
               const parsed = YAML2.parseDocument(body.frontmatterRaw);
               if (parsed.errors.length)
                 console.error("ERROR when saving frontmatter", parsed.errors);
-              else
-                slide.source.frontmatterDoc = parsed;
+              else slide.source.frontmatterDoc = parsed;
             }
           }
-          if (body.note)
-            slide.note = slide.source.note = body.note;
-          if (body.frontmatter)
-            updateFrontmatterPatch(slide, body.frontmatter);
+          if (body.note) slide.note = slide.source.note = body.note;
+          if (body.frontmatter) updateFrontmatterPatch(slide, body.frontmatter);
           parser2.prettifySlide(slide.source);
-          const fileContent = await parser2.save(data.markdownFiles[slide.source.filepath]);
+          const fileContent = await parser2.save(
+            data.markdownFiles[slide.source.filepath]
+          );
           if (body.skipHmr) {
             skipHmr = {
               filePath: slide.source.filepath,
-              fileContent
+              fileContent,
             };
             server?.moduleGraph.invalidateModule(
               server.moduleGraph.getModuleById(sourceIds.md[idx])
@@ -1067,17 +1256,18 @@ function createSlidesLoader(options, serverOptions) {
     },
     async handleHotUpdate(ctx) {
       const forceChangedSlides = data.watchFiles[ctx.file];
-      if (!forceChangedSlides)
-        return;
+      if (!forceChangedSlides) return;
       for (const index of forceChangedSlides) {
         hmrSlidesIndexes.add(index);
       }
       const newData = await serverOptions.loadData?.({
-        [ctx.file]: await ctx.read()
+        [ctx.file]: await ctx.read(),
       });
-      if (!newData)
-        return [];
-      if (skipHmr && newData.markdownFiles[skipHmr.filePath]?.raw === skipHmr.fileContent) {
+      if (!newData) return [];
+      if (
+        skipHmr &&
+        newData.markdownFiles[skipHmr.filePath]?.raw === skipHmr.fileContent
+      ) {
         skipHmr = null;
         return [];
       }
@@ -1111,65 +1301,71 @@ function createSlidesLoader(options, serverOptions) {
       for (let i = 0; i < length; i++) {
         const a = data.slides[i];
         const b = newData.slides[i];
-        if (!hmrSlidesIndexes.has(i) && a.content.trim() === b.content.trim() && a.title?.trim() === b.title?.trim() && equal(a.frontmatter, b.frontmatter)) {
+        if (
+          !hmrSlidesIndexes.has(i) &&
+          a.content.trim() === b.content.trim() &&
+          a.title?.trim() === b.title?.trim() &&
+          equal(a.frontmatter, b.frontmatter)
+        ) {
           if (a.note !== b.note) {
-            ctx.server.hot.send(
-              "slidev:update-note",
-              {
-                no: i + 1,
-                note: b.note || "",
-                noteHTML: renderNote(b.note || "")
-              }
-            );
+            ctx.server.hot.send("slidev:update-note", {
+              no: i + 1,
+              note: b.note || "",
+              noteHTML: renderNote(b.note || ""),
+            });
           }
           continue;
         }
-        ctx.server.hot.send(
-          "slidev:update-slide",
-          {
-            no: i + 1,
-            data: withRenderedNote(newData.slides[i])
-          }
-        );
+        ctx.server.hot.send("slidev:update-slide", {
+          no: i + 1,
+          data: withRenderedNote(newData.slides[i]),
+        });
         hmrSlidesIndexes.add(i);
       }
       Object.assign(data, newData);
       Object.assign(utils, createDataUtils(options));
-      if (hmrSlidesIndexes.size > 0)
-        moduleIds.add(templateTitleRendererMd.id);
+      if (hmrSlidesIndexes.size > 0) moduleIds.add(templateTitleRendererMd.id);
       const vueModules = Array.from(hmrSlidesIndexes).flatMap((idx) => {
-        const frontmatter = ctx.server.moduleGraph.getModuleById(sourceIds.frontmatter[idx]);
+        const frontmatter = ctx.server.moduleGraph.getModuleById(
+          sourceIds.frontmatter[idx]
+        );
         const main = ctx.server.moduleGraph.getModuleById(sourceIds.md[idx]);
-        const styles = main ? [...main.clientImportedModules].find((m) => m.id?.includes(`&type=style`)) : void 0;
-        return [
-          frontmatter,
-          main,
-          styles
-        ];
+        const styles = main
+          ? [...main.clientImportedModules].find((m) =>
+              m.id?.includes(`&type=style`)
+            )
+          : void 0;
+        return [frontmatter, main, styles];
       });
       hmrSlidesIndexes.clear();
       const moduleEntries = [
-        ...ctx.modules.filter((i) => i.id === templateMonacoRunDeps.id || i.id === templateMonacoTypes.id),
+        ...ctx.modules.filter(
+          (i) =>
+            i.id === templateMonacoRunDeps.id || i.id === templateMonacoTypes.id
+        ),
         ...vueModules,
-        ...Array.from(moduleIds).map((id) => ctx.server.moduleGraph.getModuleById(id))
-      ].filter(notNullish).filter((i) => !i.id?.startsWith("/@id/@vite-icons"));
+        ...Array.from(moduleIds).map((id) =>
+          ctx.server.moduleGraph.getModuleById(id)
+        ),
+      ]
+        .filter(notNullish)
+        .filter((i) => !i.id?.startsWith("/@id/@vite-icons"));
       updateServerWatcher();
       return moduleEntries;
     },
     resolveId: {
       order: "pre",
       handler(id) {
-        if (id.startsWith("/@slidev/") || id.includes("__slidev_"))
-          return id;
+        if (id.startsWith("/@slidev/") || id.includes("__slidev_")) return id;
         return null;
-      }
+      },
     },
     async load(id) {
       const template = templates.find((i) => i.id === id);
       if (template) {
         return {
           code: await template.getContent.call(this, options),
-          map: { mappings: "" }
+          map: { mappings: "" },
         };
       }
       const matchFacade = id.match(regexSlideFacadeId);
@@ -1179,7 +1375,7 @@ function createSlidesLoader(options, serverOptions) {
         const sourceId = JSON.stringify(sourceIds[type][idx]);
         return [
           `export * from ${sourceId}`,
-          `export { default } from ${sourceId}`
+          `export { default } from ${sourceId}`,
         ].join("\n");
       }
       const matchSource = id.match(regexSlideSourceId);
@@ -1187,12 +1383,11 @@ function createSlidesLoader(options, serverOptions) {
         const [, no, type] = matchSource;
         const idx = +no - 1;
         const slide = data.slides[idx];
-        if (!slide)
-          return;
+        if (!slide) return;
         if (type === "md") {
           return {
             code: slide.content,
-            map: { mappings: "" }
+            map: { mappings: "" },
           };
         } else if (type === "frontmatter") {
           const slideBase = {
@@ -1201,7 +1396,7 @@ function createSlidesLoader(options, serverOptions) {
             source: void 0,
             importChain: void 0,
             // remove raw content in build, optimize the bundle size
-            ...mode === "build" ? { raw: "", content: "", note: "" } : {}
+            ...(mode === "build" ? { raw: "", content: "", note: "" } : {}),
           };
           const fontmatter = getFrontmatter(idx);
           return {
@@ -1242,15 +1437,14 @@ function createSlidesLoader(options, serverOptions) {
               "  },",
               "  __clicksContext: null,",
               "  __preloaded: false,",
-              "})"
+              "})",
             ].join("\n"),
-            map: { mappings: "" }
+            map: { mappings: "" },
           };
         }
       }
-      if (data.markdownFiles[id])
-        return "";
-    }
+      if (data.markdownFiles[id]) return "";
+    },
   };
 }
 
@@ -1260,32 +1454,43 @@ import Markdown from "unplugin-vue-markdown/vite";
 
 // ../../node_modules/.pnpm/@hedgedoc+markdown-it-plugins@2.1.4_patch_hash=tuyuxytl56b2vxulpkzt2wf4o4_markdown-it@14.1.0/node_modules/@hedgedoc/markdown-it-plugins/dist/esm/image-size/specialCharacters.js
 var SpecialCharacters;
-(function(SpecialCharacters2) {
-  SpecialCharacters2[SpecialCharacters2["EXCLAMATION_MARK"] = 33] = "EXCLAMATION_MARK";
-  SpecialCharacters2[SpecialCharacters2["OPENING_BRACKET"] = 91] = "OPENING_BRACKET";
-  SpecialCharacters2[SpecialCharacters2["OPENING_PARENTHESIS"] = 40] = "OPENING_PARENTHESIS";
-  SpecialCharacters2[SpecialCharacters2["WHITESPACE"] = 32] = "WHITESPACE";
-  SpecialCharacters2[SpecialCharacters2["NEW_LINE"] = 10] = "NEW_LINE";
-  SpecialCharacters2[SpecialCharacters2["EQUALS"] = 61] = "EQUALS";
-  SpecialCharacters2[SpecialCharacters2["LOWER_CASE_X"] = 120] = "LOWER_CASE_X";
-  SpecialCharacters2[SpecialCharacters2["NUMBER_ZERO"] = 48] = "NUMBER_ZERO";
-  SpecialCharacters2[SpecialCharacters2["NUMBER_NINE"] = 57] = "NUMBER_NINE";
-  SpecialCharacters2[SpecialCharacters2["PERCENTAGE"] = 37] = "PERCENTAGE";
-  SpecialCharacters2[SpecialCharacters2["CLOSING_PARENTHESIS"] = 41] = "CLOSING_PARENTHESIS";
+(function (SpecialCharacters2) {
+  SpecialCharacters2[(SpecialCharacters2["EXCLAMATION_MARK"] = 33)] =
+    "EXCLAMATION_MARK";
+  SpecialCharacters2[(SpecialCharacters2["OPENING_BRACKET"] = 91)] =
+    "OPENING_BRACKET";
+  SpecialCharacters2[(SpecialCharacters2["OPENING_PARENTHESIS"] = 40)] =
+    "OPENING_PARENTHESIS";
+  SpecialCharacters2[(SpecialCharacters2["WHITESPACE"] = 32)] = "WHITESPACE";
+  SpecialCharacters2[(SpecialCharacters2["NEW_LINE"] = 10)] = "NEW_LINE";
+  SpecialCharacters2[(SpecialCharacters2["EQUALS"] = 61)] = "EQUALS";
+  SpecialCharacters2[(SpecialCharacters2["LOWER_CASE_X"] = 120)] =
+    "LOWER_CASE_X";
+  SpecialCharacters2[(SpecialCharacters2["NUMBER_ZERO"] = 48)] = "NUMBER_ZERO";
+  SpecialCharacters2[(SpecialCharacters2["NUMBER_NINE"] = 57)] = "NUMBER_NINE";
+  SpecialCharacters2[(SpecialCharacters2["PERCENTAGE"] = 37)] = "PERCENTAGE";
+  SpecialCharacters2[(SpecialCharacters2["CLOSING_PARENTHESIS"] = 41)] =
+    "CLOSING_PARENTHESIS";
 })(SpecialCharacters || (SpecialCharacters = {}));
 
 // ../../node_modules/.pnpm/@hedgedoc+markdown-it-plugins@2.1.4_patch_hash=tuyuxytl56b2vxulpkzt2wf4o4_markdown-it@14.1.0/node_modules/@hedgedoc/markdown-it-plugins/dist/esm/task-lists/index.js
 import Token from "markdown-it/lib/token.mjs";
 var checkboxRegex = /^ *\[([\sx])] /i;
-function taskLists(md, options = { enabled: false, label: false, lineNumber: false }) {
-  md.core.ruler.after("inline", "task-lists", (state) => processToken(state, options));
+function taskLists(
+  md,
+  options = { enabled: false, label: false, lineNumber: false }
+) {
+  md.core.ruler.after("inline", "task-lists", (state) =>
+    processToken(state, options)
+  );
   md.renderer.rules.taskListItemCheckbox = (tokens) => {
     const token = tokens[0];
     const checkedAttribute = token.attrGet("checked") ? 'checked="" ' : "";
     const disabledAttribute = token.attrGet("disabled") ? 'disabled="" ' : "";
     const line = token.attrGet("line");
     const idAttribute = `id="${token.attrGet("id")}" `;
-    const dataLineAttribute = line && options.lineNumber ? `data-line="${line}" ` : "";
+    const dataLineAttribute =
+      line && options.lineNumber ? `data-line="${line}" ` : "";
     return `<input class="task-list-item-checkbox" type="checkbox" ${checkedAttribute}${disabledAttribute}${dataLineAttribute}${idAttribute}/>`;
   };
   md.renderer.rules.taskListItemLabel_close = () => {
@@ -1304,7 +1509,10 @@ function processToken(state, options) {
       continue;
     }
     todoify(allTokens[i], options);
-    allTokens[i - 2].attrJoin("class", `task-list-item ${options.enabled ? " enabled" : ""}`);
+    allTokens[i - 2].attrJoin(
+      "class",
+      `task-list-item ${options.enabled ? " enabled" : ""}`
+    );
     const parentToken = findParentToken(allTokens, i - 2);
     if (parentToken) {
       const classes = parentToken.attrGet("class") ?? "";
@@ -1317,7 +1525,11 @@ function processToken(state, options) {
 }
 function findParentToken(tokens, index) {
   const targetLevel = tokens[index].level - 1;
-  for (let currentTokenIndex = index - 1; currentTokenIndex >= 0; currentTokenIndex--) {
+  for (
+    let currentTokenIndex = index - 1;
+    currentTokenIndex >= 0;
+    currentTokenIndex--
+  ) {
     if (tokens[currentTokenIndex].level === targetLevel) {
       return tokens[currentTokenIndex];
     }
@@ -1325,7 +1537,12 @@ function findParentToken(tokens, index) {
   return void 0;
 }
 function isTodoItem(tokens, index) {
-  return isInline(tokens[index]) && isParagraph(tokens[index - 1]) && isListItem(tokens[index - 2]) && startsWithTodoMarkdown(tokens[index]);
+  return (
+    isInline(tokens[index]) &&
+    isParagraph(tokens[index - 1]) &&
+    isListItem(tokens[index - 2]) &&
+    startsWithTodoMarkdown(tokens[index])
+  );
 }
 function todoify(token, options) {
   if (token.children == null) {
@@ -1333,7 +1550,10 @@ function todoify(token, options) {
   }
   const id = generateIdForToken(token);
   token.children.splice(0, 0, createCheckboxToken(token, options.enabled, id));
-  token.children[1].content = token.children[1].content.replace(checkboxRegex, "");
+  token.children[1].content = token.children[1].content.replace(
+    checkboxRegex,
+    ""
+  );
   if (options.label) {
     token.children.splice(1, 0, createLabelBeginToken(id));
     token.children.push(createLabelEndToken());
@@ -1398,11 +1618,9 @@ async function loadSetups(roots, filename, args, extraLoader) {
     if (fs3.existsSync(path4)) {
       const { default: setup } = await loadModule(path4);
       const ret = await setup(...args);
-      if (ret)
-        returns.push(ret);
+      if (ret) returns.push(ret);
     }
-    if (extraLoader)
-      returns.push(...await extraLoader(root));
+    if (extraLoader) returns.push(...(await extraLoader(root)));
   }
   return returns;
 }
@@ -1410,10 +1628,7 @@ async function loadSetups(roots, filename, args, extraLoader) {
 // node/setups/katex.ts
 async function setupKatex(roots) {
   const options = await loadSetups(roots, "katex.ts", []);
-  return Object.assign(
-    { strict: false },
-    ...options
-  );
+  return Object.assign({ strict: false }, ...options);
 }
 
 // node/syntax/markdown-it/markdown-it-escape-code.ts
@@ -1433,24 +1648,24 @@ function isValidDelim(state, pos) {
   let can_close = true;
   const prevChar = pos > 0 ? state.src.charCodeAt(pos - 1) : -1;
   const nextChar = pos + 1 <= max ? state.src.charCodeAt(pos + 1) : -1;
-  if (prevChar === 32 || prevChar === 9 || /* \t */
-  nextChar >= 48 && nextChar <= 57)
+  if (
+    prevChar === 32 ||
+    prevChar === 9 /* \t */ ||
+    (nextChar >= 48 && nextChar <= 57)
+  )
     can_close = false;
-  if (nextChar === 32 || nextChar === 9)
-    can_open = false;
+  if (nextChar === 32 || nextChar === 9) can_open = false;
   return {
     can_open,
-    can_close
+    can_close,
   };
 }
 function math_inline(state, silent) {
   let match, token, res, pos;
-  if (state.src[state.pos] !== "$")
-    return false;
+  if (state.src[state.pos] !== "$") return false;
   res = isValidDelim(state, state.pos);
   if (!res.can_open) {
-    if (!silent)
-      state.pending += "$";
+    if (!silent) state.pending += "$";
     state.pos += 1;
     return true;
   }
@@ -1459,26 +1674,22 @@ function math_inline(state, silent) {
   while ((match = state.src.indexOf("$", match)) !== -1) {
     pos = match - 1;
     while (state.src[pos] === "\\") pos -= 1;
-    if ((match - pos) % 2 === 1)
-      break;
+    if ((match - pos) % 2 === 1) break;
     match += 1;
   }
   if (match === -1) {
-    if (!silent)
-      state.pending += "$";
+    if (!silent) state.pending += "$";
     state.pos = start;
     return true;
   }
   if (match - start === 0) {
-    if (!silent)
-      state.pending += "$$";
+    if (!silent) state.pending += "$$";
     state.pos = start + 1;
     return true;
   }
   res = isValidDelim(state, match);
   if (!res.can_close) {
-    if (!silent)
-      state.pending += "$";
+    if (!silent) state.pending += "$";
     state.pos = start;
     return true;
   }
@@ -1498,22 +1709,18 @@ function math_block(state, start, end, silent) {
   let found = false;
   let pos = state.bMarks[start] + state.tShift[start];
   let max = state.eMarks[start];
-  if (pos + 2 > max)
-    return false;
-  if (state.src.slice(pos, pos + 2) !== "$$")
-    return false;
+  if (pos + 2 > max) return false;
+  if (state.src.slice(pos, pos + 2) !== "$$") return false;
   pos += 2;
   firstLine = state.src.slice(pos, max);
-  if (silent)
-    return true;
+  if (silent) return true;
   if (firstLine.trim().slice(-2) === "$$") {
     firstLine = firstLine.trim().slice(0, -2);
     found = true;
   }
   for (next = start; !found; ) {
     next++;
-    if (next >= end)
-      break;
+    if (next >= end) break;
     pos = state.bMarks[next] + state.tShift[next];
     max = state.eMarks[next];
     if (pos < max && state.tShift[next] < state.blkIndent) {
@@ -1528,43 +1735,46 @@ function math_block(state, start, end, silent) {
   state.line = next + 1;
   const token = state.push("math_block", "math", 0);
   token.block = true;
-  token.content = (firstLine && firstLine.trim() ? `${firstLine}
-` : "") + state.getLines(start + 1, next, state.tShift[start], true) + (lastLine && lastLine.trim() ? lastLine : "");
+  token.content =
+    (firstLine && firstLine.trim()
+      ? `${firstLine}
+`
+      : "") +
+    state.getLines(start + 1, next, state.tShift[start], true) +
+    (lastLine && lastLine.trim() ? lastLine : "");
   token.map = [start, state.line];
   token.markup = "$$";
   return true;
 }
 function MarkdownItKatex(md, options) {
-  const katexInline = function(latex) {
+  const katexInline = function (latex) {
     options.displayMode = false;
     try {
       return katex.renderToString(latex, options);
     } catch (error) {
-      if (options.throwOnError)
-        console.warn(error);
+      if (options.throwOnError) console.warn(error);
       return latex;
     }
   };
-  const inlineRenderer = function(tokens, idx) {
+  const inlineRenderer = function (tokens, idx) {
     return katexInline(tokens[idx].content);
   };
-  const katexBlock = function(latex) {
+  const katexBlock = function (latex) {
     options.displayMode = true;
     try {
       return `<p>${katex.renderToString(latex, options)}</p>`;
     } catch (error) {
-      if (options.throwOnError)
-        console.warn(error);
+      if (options.throwOnError) console.warn(error);
       return latex;
     }
   };
-  const blockRenderer = function(tokens, idx) {
+  const blockRenderer = function (tokens, idx) {
     return `${katexBlock(tokens[idx].content)}
 `;
   };
   md.inline.ruler.after("escape", "math_inline", math_inline);
   md.block.ruler.after("blockquote", "math_block", math_block, {
-    alt: ["paragraph", "reference", "blockquote", "list"]
+    alt: ["paragraph", "reference", "blockquote", "list"],
   });
   md.renderer.rules.math_inline = inlineRenderer;
   md.renderer.rules.math_block = blockRenderer;
@@ -1576,7 +1786,12 @@ import { fromHighlighter } from "@shikijs/markdown-it/core";
 
 // node/syntax/transform/utils.ts
 function normalizeRangeStr(rangeStr = "") {
-  return !rangeStr.trim() ? [] : rangeStr.trim().split(/\|/g).map((i) => i.trim());
+  return !rangeStr.trim()
+    ? []
+    : rangeStr
+        .trim()
+        .split(/\|/g)
+        .map((i) => i.trim());
 }
 function getCodeBlocks(md) {
   const codeblocks = Array.from(md.matchAll(/^```[\s\S]*?^```/gm)).map((m) => {
@@ -1593,7 +1808,7 @@ function getCodeBlocks(md) {
     },
     isLineInsideCodeblocks(line) {
       return codeblocks.some(([, , s, e]) => s <= line && line <= e);
-    }
+    },
   };
 }
 function escapeVueInCode(md) {
@@ -1603,15 +1818,16 @@ function escapeVueInCode(md) {
 // node/syntax/markdown-it/markdown-it-shiki.ts
 async function MarkdownItShiki({ data: { config }, mode, utils }) {
   const transformers = [
-    ...utils.shikiOptions.transformers || [],
-    (config.twoslash === true || config.twoslash === mode) && (await import("@shikijs/vitepress-twoslash")).transformerTwoslash({
-      explicitTrigger: true,
-      twoslashOptions: {
-        handbookOptions: {
-          noErrorValidation: true
-        }
-      }
-    }),
+    ...(utils.shikiOptions.transformers || []),
+    (config.twoslash === true || config.twoslash === mode) &&
+      (await import("@shikijs/vitepress-twoslash")).transformerTwoslash({
+        explicitTrigger: true,
+        twoslashOptions: {
+          handbookOptions: {
+            noErrorValidation: true,
+          },
+        },
+      }),
     {
       pre(pre) {
         this.addClassToHast(pre, "slidev-code");
@@ -1619,12 +1835,12 @@ async function MarkdownItShiki({ data: { config }, mode, utils }) {
       },
       postprocess(code) {
         return escapeVueInCode(code);
-      }
-    }
+      },
+    },
   ].filter(isTruthy);
   return fromHighlighter(utils.shiki, {
     ...utils.shikiOptions,
-    transformers
+    transformers,
   });
 }
 
@@ -1637,23 +1853,24 @@ function MarkdownItVDrag(md, markdownTransformMap) {
   const sourceMapConsumers = /* @__PURE__ */ new WeakMap();
   function getSourceMapConsumer(id) {
     const s = markdownTransformMap.get(id);
-    if (!s)
-      return void 0;
+    if (!s) return void 0;
     let smc = sourceMapConsumers.get(s);
-    if (smc)
-      return smc;
+    if (smc) return smc;
     const sourceMap = s.generateMap();
     smc = new SourceMapConsumer({
       ...sourceMap,
-      version: sourceMap.version.toString()
+      version: sourceMap.version.toString(),
     });
     sourceMapConsumers.set(s, smc);
     return smc;
   }
   const _parse = md.parse;
-  md.parse = function(src, env) {
+  md.parse = function (src, env) {
     const smc = getSourceMapConsumer(env.id);
-    const toOriginalPos = smc ? (line) => smc.originalPositionFor({ line: line + 1, column: 0 }).line - 1 : (line) => line;
+    const toOriginalPos = smc
+      ? (line) =>
+          smc.originalPositionFor({ line: line + 1, column: 0 }).line - 1
+      : (line) => line;
     function toMarkdownSource(map, idx) {
       const start = toOriginalPos(map[0]);
       const end = toOriginalPos(map[1]);
@@ -1668,17 +1885,23 @@ function MarkdownItVDrag(md, markdownTransformMap) {
       }
     }
     return _parse.call(this, src, env).map((token) => {
-      if (!["html_block", "html_inline", "inline"].includes(token.type) || !token.content.includes("drag") || visited.has(token))
+      if (
+        !["html_block", "html_inline", "inline"].includes(token.type) ||
+        !token.content.includes("drag") ||
+        visited.has(token)
+      )
         return token;
-      token.content = token.content.replace(dragComponentRegex, (_, tag, space, idx) => {
-        const replacement = `<${tag} :markdownSource="${toMarkdownSource(token.map, idx)}"${space}`;
-        replaceChildren(token, dragComponentRegex, replacement);
-        return replacement;
-      }).replace(dragDirectiveRegex, (_, value, idx) => {
-        const replacement = `v-drag${value ?? ""} :markdownSource="${toMarkdownSource(token.map, idx)}"`;
-        replaceChildren(token, dragDirectiveRegex, replacement);
-        return replacement;
-      });
+      token.content = token.content
+        .replace(dragComponentRegex, (_, tag, space, idx) => {
+          const replacement = `<${tag} :markdownSource="${toMarkdownSource(token.map, idx)}"${space}`;
+          replaceChildren(token, dragComponentRegex, replacement);
+          return replacement;
+        })
+        .replace(dragDirectiveRegex, (_, value, idx) => {
+          const replacement = `v-drag${value ?? ""} :markdownSource="${toMarkdownSource(token.map, idx)}"`;
+          replaceChildren(token, dragDirectiveRegex, replacement);
+          return replacement;
+        });
       visited.add(token);
       return token;
     });
@@ -1687,7 +1910,10 @@ function MarkdownItVDrag(md, markdownTransformMap) {
 
 // node/syntax/markdown-it/index.ts
 async function useMarkdownItPlugins(md, options, markdownTransformMap) {
-  const { roots, data: { features, config } } = options;
+  const {
+    roots,
+    data: { features, config },
+  } = options;
   if (config.highlighter === "shiki") {
     md.use(await MarkdownItShiki(options));
   }
@@ -1695,11 +1921,9 @@ async function useMarkdownItPlugins(md, options, markdownTransformMap) {
   md.use(MarkdownItEscapeInlineCode);
   md.use(MarkdownItFootnote);
   md.use(taskLists, { enabled: true, lineNumber: true, label: true });
-  if (features.katex)
-    md.use(MarkdownItKatex, await setupKatex(roots));
+  if (features.katex) md.use(MarkdownItKatex, await setupKatex(roots));
   md.use(MarkdownItVDrag, markdownTransformMap);
-  if (config.mdc)
-    md.use(MarkdownItMdc);
+  if (config.mdc) md.use(MarkdownItMdc);
 }
 
 // node/setups/transformers.ts
@@ -1709,25 +1933,22 @@ async function setupTransformers(roots) {
     pre: [],
     preCodeblock: [],
     postCodeblock: [],
-    post: []
+    post: [],
   };
   for (const r of [...returns].reverse()) {
-    if (r.pre)
-      result.pre.push(...r.pre);
-    if (r.preCodeblock)
-      result.preCodeblock.push(...r.preCodeblock);
+    if (r.pre) result.pre.push(...r.pre);
+    if (r.preCodeblock) result.preCodeblock.push(...r.preCodeblock);
   }
   for (const r of returns) {
-    if (r.postCodeblock)
-      result.postCodeblock.push(...r.postCodeblock);
-    if (r.post)
-      result.post.push(...r.post);
+    if (r.postCodeblock) result.postCodeblock.push(...r.postCodeblock);
+    if (r.post) result.post.push(...r.post);
   }
   return result;
 }
 
 // node/syntax/transform/code-wrapper.ts
-var reCodeBlock = /^```([\w'-]+)?\s*(?:\{([\w*,|-]+)\}\s*?(\{[^}]*\})?([^\r\n]*))?\r?\n([ \t]*\S[\s\S]*?)^```$/gm;
+var reCodeBlock =
+  /^```([\w'-]+)?\s*(?:\{([\w*,|-]+)\}\s*?(\{[^}]*\})?([^\r\n]*))?\r?\n([ \t]*\S[\s\S]*?)^```$/gm;
 function transformCodeWrapper(ctx) {
   ctx.s.replace(
     reCodeBlock,
@@ -1753,8 +1974,7 @@ function transformPageCSS(ctx) {
   ctx.s.replace(
     /(\n<style[^>]*>)([\s\S]+?)(<\/style>)/g,
     (full, start, css, end, index) => {
-      if (codeBlocks.isInsideCodeblocks(index))
-        return full;
+      if (codeBlocks.isInsideCodeblocks(index)) return full;
       if (!start.includes("scoped"))
         start = start.replace("<style", "<style scoped");
       return `${start}
@@ -1768,7 +1988,12 @@ function transformKaTexWrapper(ctx) {
   ctx.s.replace(
     /^\$\$(?:\s*\{([\w*,|-]+)\}\s*?(?:(\{[^}]*\})\s*?)?)?\n(\S[\s\S]*?)^\$\$/gm,
     (full, rangeStr = "", options = "", code) => {
-      const ranges = !rangeStr.trim() ? [] : rangeStr.trim().split(/\|/g).map((i) => i.trim());
+      const ranges = !rangeStr.trim()
+        ? []
+        : rangeStr
+            .trim()
+            .split(/\|/g)
+            .map((i) => i.trim());
       code = code.trimEnd();
       options = options.trim() || "{}";
       return `<KaTexBlockWrapper v-bind="${options}" :ranges='${JSON.stringify(ranges)}'>
@@ -1785,30 +2010,38 @@ $$
 // node/syntax/transform/magic-move.ts
 import lz from "lz-string";
 import { codeToKeyedTokens } from "shiki-magic-move/core";
-var reMagicMoveBlock = /^````(?:md|markdown) magic-move *(\{[^}]*\})?([^ \n]*)\n([\s\S]+?)^````$/gm;
+var reMagicMoveBlock =
+  /^````(?:md|markdown) magic-move *(\{[^}]*\})?([^ \n]*)\n([\s\S]+?)^````$/gm;
 function parseLineNumbersOption(options) {
-  return /lines: *true/.test(options) ? true : /lines: *false/.test(options) ? false : void 0;
+  return /lines: *true/.test(options)
+    ? true
+    : /lines: *false/.test(options)
+      ? false
+      : void 0;
 }
 function transformMagicMove(ctx) {
-  ctx.s.replace(
-    reMagicMoveBlock,
-    (full, options = "{}", _attrs = "", body) => {
-      const matches = Array.from(body.matchAll(reCodeBlock));
-      if (!matches.length)
-        throw new Error("Magic Move block must contain at least one code block");
-      const defaultLineNumbers = parseLineNumbersOption(options) ?? ctx.options.data.config.lineNumbers;
-      const ranges = matches.map((i) => normalizeRangeStr(i[2]));
-      const steps = matches.map((i) => {
-        const lineNumbers = parseLineNumbersOption(i[3]) ?? defaultLineNumbers;
-        return codeToKeyedTokens(ctx.options.utils.shiki, i[5].trimEnd(), {
+  ctx.s.replace(reMagicMoveBlock, (full, options = "{}", _attrs = "", body) => {
+    const matches = Array.from(body.matchAll(reCodeBlock));
+    if (!matches.length)
+      throw new Error("Magic Move block must contain at least one code block");
+    const defaultLineNumbers =
+      parseLineNumbersOption(options) ?? ctx.options.data.config.lineNumbers;
+    const ranges = matches.map((i) => normalizeRangeStr(i[2]));
+    const steps = matches.map((i) => {
+      const lineNumbers = parseLineNumbersOption(i[3]) ?? defaultLineNumbers;
+      return codeToKeyedTokens(
+        ctx.options.utils.shiki,
+        i[5].trimEnd(),
+        {
           ...ctx.options.utils.shikiOptions,
-          lang: i[1]
-        }, lineNumbers);
-      });
-      const compressed = lz.compressToBase64(JSON.stringify(steps));
-      return `<ShikiMagicMove v-bind="${options}" steps-lz="${compressed}" :step-ranges='${JSON.stringify(ranges)}' />`;
-    }
-  );
+          lang: i[1],
+        },
+        lineNumbers
+      );
+    });
+    const compressed = lz.compressToBase64(JSON.stringify(steps));
+    return `<ShikiMagicMove v-bind="${options}" steps-lz="${compressed}" :step-ranges='${JSON.stringify(ranges)}' />`;
+  });
 }
 
 // node/syntax/transform/mermaid.ts
@@ -1828,7 +2061,9 @@ function transformMermaid(ctx) {
 // node/syntax/transform/monaco.ts
 import lz3 from "lz-string";
 function transformMonaco(ctx) {
-  const enabled = ctx.options.data.config.monaco === true || ctx.options.data.config.monaco === ctx.options.mode;
+  const enabled =
+    ctx.options.data.config.monaco === true ||
+    ctx.options.data.config.monaco === ctx.options.mode;
   if (!enabled) {
     ctx.s.replace(/\{monaco([\w:,-]*)\}/g, "");
     return;
@@ -1892,17 +2127,19 @@ function transformSlotSugar(ctx) {
   lines.forEach((line) => {
     const start = offset;
     offset += line.length;
-    if (codeBlocks.isInsideCodeblocks(offset))
-      return;
+    if (codeBlocks.isInsideCodeblocks(offset)) return;
     const match = line.match(/^::\s*([\w.\-:]+)\s*::(\s*)$/);
     if (match) {
-      ctx.s.overwrite(start, offset - match[2].length, `${prevSlot ? "\n\n</template>\n" : "\n"}<template v-slot:${match[1]}="slotProps">
-`);
+      ctx.s.overwrite(
+        start,
+        offset - match[2].length,
+        `${prevSlot ? "\n\n</template>\n" : "\n"}<template v-slot:${match[1]}="slotProps">
+`
+      );
       prevSlot = true;
     }
   });
-  if (prevSlot)
-    ctx.s.append("\n\n</template>");
+  if (prevSlot) ctx.s.append("\n\n</template>");
 }
 
 // node/syntax/transform/snippet.ts
@@ -1940,7 +2177,7 @@ function createMonacoWriterPlugin({ userRoot }) {
           }
         });
       });
-    }
+    },
   };
 }
 
@@ -1949,8 +2186,7 @@ function dedent(text) {
   const lines = text.split("\n");
   const minIndentLength = lines.reduce((acc, line) => {
     for (let i = 0; i < line.length; i++) {
-      if (line[i] !== " " && line[i] !== "	")
-        return Math.min(i, acc);
+      if (line[i] !== " " && line[i] !== "	") return Math.min(i, acc);
     }
     return acc;
   }, Number.POSITIVE_INFINITY);
@@ -1973,7 +2209,7 @@ function findRegion(lines, regionName) {
     // Bat
     [/^::#region ([\w*-]+)$/, /^::#endregion/],
     // C#, PHP, Powershell, Python, perl & misc
-    [/^# ?region ([\w*-]+)$/, /^# ?endregion/]
+    [/^# ?region ([\w*-]+)$/, /^# ?endregion/],
   ];
   let endReg = null;
   let start = -1;
@@ -1991,7 +2227,7 @@ function findRegion(lines, regionName) {
       return {
         start,
         end: lineId,
-        regexp: endReg
+        regexp: endReg,
       };
     }
   }
@@ -2000,20 +2236,28 @@ function findRegion(lines, regionName) {
 var reMonacoWrite = /^\{monaco-write\}/;
 function transformSnippet({ s, slide, options }) {
   const watchFiles = options.data.watchFiles;
-  const dir = path2.dirname(slide.source?.filepath ?? options.entry ?? options.userRoot);
+  const dir = path2.dirname(
+    slide.source?.filepath ?? options.entry ?? options.userRoot
+  );
   s.replace(
     // eslint-disable-next-line regexp/no-super-linear-backtracking
     /^<<<\s*(\S.*?)(#[\w-]+)?\s*(?:\s(\S+?))?\s*(\{.*)?$/gm,
     (full, filepath = "", regionName = "", lang = "", meta = "") => {
       const src = slash2(
-        /^@\//.test(filepath) ? path2.resolve(options.userRoot, filepath.slice(2)) : path2.resolve(dir, filepath)
+        /^@\//.test(filepath)
+          ? path2.resolve(options.userRoot, filepath.slice(2))
+          : path2.resolve(dir, filepath)
       );
       meta = meta.trim();
       lang = lang.trim();
       lang = lang || path2.extname(filepath).slice(1);
       const isAFile = fs5.statSync(src).isFile();
       if (!fs5.existsSync(src) || !isAFile) {
-        throw new Error(isAFile ? `Code snippet path not found: ${src}` : `Invalid code snippet option`);
+        throw new Error(
+          isAFile
+            ? `Code snippet path not found: ${src}`
+            : `Invalid code snippet option`
+        );
       }
       let content = fs5.readFileSync(src, "utf8");
       if (regionName) {
@@ -2021,7 +2265,10 @@ function transformSnippet({ s, slide, options }) {
         const region = findRegion(lines, regionName.slice(1));
         if (region) {
           content = dedent(
-            lines.slice(region.start, region.end).filter((line) => !region.regexp.test(line.trim())).join("\n")
+            lines
+              .slice(region.start, region.end)
+              .filter((line) => !region.regexp.test(line.trim()))
+              .join("\n")
           );
         }
       }
@@ -2054,11 +2301,11 @@ async function getMarkdownTransformers(options) {
     transformPlantUml,
     options.data.features.monaco && transformMonaco,
     ...extras.postCodeblock,
-    transformCodeWrapper,
+    // transformCodeWrapper,
     options.data.features.katex && transformKaTexWrapper,
     transformPageCSS,
     transformSlotSugar,
-    ...extras.post
+    ...extras.post,
   ];
 }
 
@@ -2077,7 +2324,7 @@ async function createMarkdownPlugin(options, { markdown: mdOptions }) {
       html: true,
       xhtmlOut: true,
       linkify: true,
-      ...mdOptions?.markdownItOptions
+      ...mdOptions?.markdownItOptions,
     },
     ...mdOptions,
     async markdownItSetup(md) {
@@ -2087,29 +2334,25 @@ async function createMarkdownPlugin(options, { markdown: mdOptions }) {
     transforms: {
       ...mdOptions?.transforms,
       before(code, id) {
-        if (options.data.markdownFiles[id])
-          return "";
+        if (options.data.markdownFiles[id]) return "";
         code = mdOptions?.transforms?.before?.(code, id) ?? code;
         const match = id.match(regexSlideSourceId);
-        if (!match)
-          return code;
+        if (!match) return code;
         const s = new MagicString(code);
         markdownTransformMap.set(id, s);
         const ctx = {
           s,
           slide: options.data.slides[+match[1] - 1],
-          options
+          options,
         };
         for (const transformer of transformers) {
-          if (!transformer)
-            continue;
+          if (!transformer) continue;
           transformer(ctx);
-          if (!ctx.s.isEmpty())
-            ctx.s.commit();
+          if (!ctx.s.isEmpty()) ctx.s.commit();
         }
         return s.toString();
-      }
-    }
+      },
+    },
   });
 }
 
@@ -2123,13 +2366,11 @@ function createMonacoTypesLoader({ userRoot, utils }) {
   return {
     name: "slidev:monaco-types-loader",
     resolveId(id) {
-      if (id.startsWith("/@slidev-monaco-types/"))
-        return id;
+      if (id.startsWith("/@slidev-monaco-types/")) return id;
       return null;
     },
     async load(id) {
-      if (!id.startsWith("/@slidev-monaco-types/"))
-        return null;
+      if (!id.startsWith("/@slidev-monaco-types/")) return null;
       const url = new URL(id, "http://localhost");
       if (url.pathname === "/@slidev-monaco-types/resolve") {
         const query = new URLSearchParams(url.search);
@@ -2144,7 +2385,10 @@ function createMonacoTypesLoader({ userRoot, utils }) {
         deps = deps.filter((pkg2) => !utils.isMonacoTypesIgnored(pkg2));
         return [
           `import "/@slidev-monaco-types/load?${new URLSearchParams({ root, name: pkgJson.name })}"`,
-          ...deps.map((dep) => `import "/@slidev-monaco-types/resolve?${new URLSearchParams({ pkg: dep, importer: root })}"`)
+          ...deps.map(
+            (dep) =>
+              `import "/@slidev-monaco-types/resolve?${new URLSearchParams({ pkg: dep, importer: root })}"`
+          ),
         ].join("\n");
       }
       if (url.pathname === "/@slidev-monaco-types/load") {
@@ -2152,46 +2396,47 @@ function createMonacoTypesLoader({ userRoot, utils }) {
         const root = query.get("root");
         const name = query.get("name");
         const files = await fg2(
-          [
-            "**/*.ts",
-            "**/*.mts",
-            "**/*.cts",
-            "package.json"
-          ],
+          ["**/*.ts", "**/*.mts", "**/*.cts", "package.json"],
           {
             cwd: root,
             followSymbolicLinks: true,
-            ignore: ["**/node_modules/**"]
+            ignore: ["**/node_modules/**"],
           }
         );
-        if (!files.length)
-          return "/** No files found **/";
+        if (!files.length) return "/** No files found **/";
         return [
           'import { addFile } from "@slidev/client/setup/monaco.ts"',
-          ...files.map((file) => `addFile(() => import(${JSON.stringify(`${toAtFS(resolve5(root, file))}?monaco-types&raw`)}), ${JSON.stringify(`node_modules/${name}/${file}`)})`)
+          ...files.map(
+            (file) =>
+              `addFile(() => import(${JSON.stringify(`${toAtFS(resolve5(root, file))}?monaco-types&raw`)}), ${JSON.stringify(`node_modules/${name}/${file}`)})`
+          ),
         ].join("\n");
       }
-    }
+    },
   };
 }
 
 // node/vite/remoteAssets.ts
-async function createRemoteAssetsPlugin({ data: { config }, mode }, pluginOptions) {
-  if (!(config.remoteAssets === true || config.remoteAssets === mode))
-    return;
-  const { VitePluginRemoteAssets, DefaultRules } = await import("vite-plugin-remote-assets");
+async function createRemoteAssetsPlugin(
+  { data: { config }, mode },
+  pluginOptions
+) {
+  if (!(config.remoteAssets === true || config.remoteAssets === mode)) return;
+  const { VitePluginRemoteAssets, DefaultRules } = await import(
+    "vite-plugin-remote-assets"
+  );
   return VitePluginRemoteAssets({
-    resolveMode: (id) => id.endsWith("index.html") ? "relative" : "@fs",
+    resolveMode: (id) => (id.endsWith("index.html") ? "relative" : "@fs"),
     awaitDownload: mode === "build",
     ...pluginOptions.remoteAssets,
     rules: [
       ...DefaultRules,
       {
         match: /\b(https?:\/\/image.unsplash\.com.*?)(?=[`'")\]])/gi,
-        ext: ".png"
+        ext: ".png",
       },
-      ...pluginOptions.remoteAssets?.rules ?? []
-    ]
+      ...(pluginOptions.remoteAssets?.rules ?? []),
+    ],
   });
 }
 
@@ -2199,48 +2444,50 @@ async function createRemoteAssetsPlugin({ data: { config }, mode }, pluginOption
 import ServerRef from "vite-plugin-vue-server-ref";
 
 // node/integrations/drawings.ts
-import { basename, dirname as dirname2, join as join9, resolve as resolve6 } from "node:path";
+import {
+  basename,
+  dirname as dirname2,
+  join as join9,
+  resolve as resolve6,
+} from "node:path";
 import fg3 from "fast-glob";
 import fs7 from "fs-extra";
 function resolveDrawingsDir(options) {
-  return options.data.config.drawings.persist ? resolve6(
-    dirname2(options.entry),
-    options.data.config.drawings.persist
-  ) : void 0;
+  return options.data.config.drawings.persist
+    ? resolve6(dirname2(options.entry), options.data.config.drawings.persist)
+    : void 0;
 }
 async function loadDrawings(options) {
   const dir = resolveDrawingsDir(options);
-  if (!dir || !fs7.existsSync(dir))
-    return {};
+  if (!dir || !fs7.existsSync(dir)) return {};
   const files = await fg3("*.svg", {
     onlyFiles: true,
     cwd: dir,
     absolute: true,
-    suppressErrors: true
+    suppressErrors: true,
   });
   const obj = {};
-  await Promise.all(files.map(async (path4) => {
-    const num = +basename(path4, ".svg");
-    if (Number.isNaN(num))
-      return;
-    const content = await fs7.readFile(path4, "utf8");
-    const lines = content.split(/\n/g);
-    obj[num.toString()] = lines.slice(1, -1).join("\n");
-  }));
+  await Promise.all(
+    files.map(async (path4) => {
+      const num = +basename(path4, ".svg");
+      if (Number.isNaN(num)) return;
+      const content = await fs7.readFile(path4, "utf8");
+      const lines = content.split(/\n/g);
+      obj[num.toString()] = lines.slice(1, -1).join("\n");
+    })
+  );
   return obj;
 }
 async function writeDrawings(options, drawing) {
   const dir = resolveDrawingsDir(options);
-  if (!dir)
-    return;
+  if (!dir) return;
   const width = options.data.config.canvasWidth;
   const height = Math.round(width / options.data.config.aspectRatio);
   const SVG_HEAD = `<svg width="${width}" height="${height}" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">`;
   await fs7.ensureDir(dir);
   return Promise.all(
     Object.entries(drawing).map(async ([key, value]) => {
-      if (!value)
-        return;
+      if (!value) return;
       const svg = `${SVG_HEAD}
 ${value}
 </svg>`;
@@ -2250,7 +2497,11 @@ ${value}
 }
 
 // node/integrations/snapshots.ts
-import { dirname as dirname3, join as join10, resolve as resolve7 } from "node:path";
+import {
+  dirname as dirname3,
+  join as join10,
+  resolve as resolve7,
+} from "node:path";
 import fs8 from "fs-extra";
 function resolveSnapshotsDir(options) {
   return resolve7(dirname3(options.entry), ".slidev/snapshots");
@@ -2258,16 +2509,18 @@ function resolveSnapshotsDir(options) {
 async function loadSnapshots(options) {
   const dir = resolveSnapshotsDir(options);
   const file = join10(dir, "snapshots.json");
-  if (!dir || !fs8.existsSync(file))
-    return {};
+  if (!dir || !fs8.existsSync(file)) return {};
   return JSON.parse(await fs8.readFile(file, "utf8"));
 }
 async function writeSnapshots(options, data) {
   const dir = resolveSnapshotsDir(options);
-  if (!dir)
-    return;
+  if (!dir) return;
   await fs8.ensureDir(dir);
-  await fs8.writeFile(join10(dir, "snapshots.json"), JSON.stringify(data, null, 2), "utf-8");
+  await fs8.writeFile(
+    join10(dir, "snapshots.json"),
+    JSON.stringify(data, null, 2),
+    "utf-8"
+  );
 }
 
 // node/vite/serverRef.ts
@@ -2279,37 +2532,40 @@ async function createServerRefPlugin(options, pluginOptions) {
       sync: false,
       nav: {
         page: 0,
-        clicks: 0
+        clicks: 0,
       },
       drawings: await loadDrawings(options),
       snapshots: await loadSnapshots(options),
-      ...pluginOptions.serverRef?.state
+      ...pluginOptions.serverRef?.state,
     },
     onChanged(key, data, patch, timestamp) {
       pluginOptions.serverRef?.onChanged?.(key, data, patch, timestamp);
       if (options.data.config.drawings.persist && key === "drawings")
         writeDrawings(options, patch ?? data);
-      if (key === "snapshots")
-        writeSnapshots(options, data);
-    }
+      if (key === "snapshots") writeSnapshots(options, data);
+    },
   });
 }
 
 // node/vite/staticCopy.ts
 import { existsSync as existsSync5 } from "node:fs";
 import { join as join11 } from "node:path";
-async function createStaticCopyPlugin({ themeRoots, addonRoots }, pluginOptions) {
-  const publicDirs = [...themeRoots, ...addonRoots].map((i) => join11(i, "public")).filter(existsSync5);
-  if (!publicDirs.length)
-    return;
+async function createStaticCopyPlugin(
+  { themeRoots, addonRoots },
+  pluginOptions
+) {
+  const publicDirs = [...themeRoots, ...addonRoots]
+    .map((i) => join11(i, "public"))
+    .filter(existsSync5);
+  if (!publicDirs.length) return;
   const { viteStaticCopy } = await import("vite-plugin-static-copy");
   return viteStaticCopy({
     silent: true,
     targets: publicDirs.map((dir) => ({
       src: `${dir}/*`,
-      dest: "theme"
+      dest: "theme",
     })),
-    ...pluginOptions.staticCopy
+    ...pluginOptions.staticCopy,
   });
 }
 
@@ -2322,15 +2578,18 @@ import { resolve as resolve8 } from "node:path";
 import { mergeConfigs, presetIcons } from "unocss";
 async function setupUnocss({ clientRoot, roots, data, utils }) {
   async function loadFileConfigs(root) {
-    return (await Promise.all([
-      resolve8(root, "uno.config.ts"),
-      resolve8(root, "unocss.config.ts")
-    ].map(async (i) => {
-      if (!existsSync6(i))
-        return void 0;
-      const loaded = await loadModule(i);
-      return "default" in loaded ? loaded.default : loaded;
-    }))).filter((x) => !!x);
+    return (
+      await Promise.all(
+        [
+          resolve8(root, "uno.config.ts"),
+          resolve8(root, "unocss.config.ts"),
+        ].map(async (i) => {
+          if (!existsSync6(i)) return void 0;
+          const loaded = await loadModule(i);
+          return "default" in loaded ? loaded.default : loaded;
+        })
+      )
+    ).filter((x) => !!x);
   }
   const configs = [
     {
@@ -2339,14 +2598,15 @@ async function setupUnocss({ clientRoot, roots, data, utils }) {
           collectionsNodeResolvePath: utils.iconsResolvePath,
           collections: {
             slidev: {
-              logo: () => readFileSync(resolve8(clientRoot, "assets/logo.svg"), "utf-8")
-            }
-          }
-        })
-      ]
+              logo: () =>
+                readFileSync(resolve8(clientRoot, "assets/logo.svg"), "utf-8"),
+            },
+          },
+        }),
+      ],
     },
-    ...await loadFileConfigs(clientRoot),
-    ...await loadSetups(roots, "unocss.ts", [], loadFileConfigs)
+    ...(await loadFileConfigs(clientRoot)),
+    ...(await loadSetups(roots, "unocss.ts", [], loadFileConfigs)),
   ].filter(Boolean);
   const config = mergeConfigs(configs);
   config.theme ||= {};
@@ -2361,8 +2621,8 @@ async function setupUnocss({ clientRoot, roots, data, utils }) {
 async function createUnocssPlugin(options, pluginOptions) {
   return UnoCSS({
     configFile: false,
-    ...await setupUnocss(options),
-    ...pluginOptions.unocss
+    ...(await setupUnocss(options)),
+    ...pluginOptions.unocss,
   });
 }
 
@@ -2397,13 +2657,10 @@ var customElements = /* @__PURE__ */ new Set([
   "mtr",
   "munder",
   "munderover",
-  "semantics"
+  "semantics",
 ]);
 async function createVuePlugin(_options, pluginOptions) {
-  const {
-    vue: vueOptions = {},
-    vuejsx: vuejsxOptions = {}
-  } = pluginOptions;
+  const { vue: vueOptions = {}, vuejsx: vuejsxOptions = {} } = pluginOptions;
   const VuePlugin = Vue({
     include: [/\.vue$/, /\.vue\?vue/, /\.vue\?v=/, /\.md$/, /\.md\?vue/],
     exclude: [],
@@ -2413,16 +2670,16 @@ async function createVuePlugin(_options, pluginOptions) {
       compilerOptions: {
         ...vueOptions?.template?.compilerOptions,
         isCustomElement(tag) {
-          return customElements.has(tag) || vueOptions?.template?.compilerOptions?.isCustomElement?.(tag);
-        }
-      }
-    }
+          return (
+            customElements.has(tag) ||
+            vueOptions?.template?.compilerOptions?.isCustomElement?.(tag)
+          );
+        },
+      },
+    },
   });
   const VueJsxPlugin = VueJsx(vuejsxOptions);
-  return [
-    VueJsxPlugin,
-    VuePlugin
-  ];
+  return [VueJsxPlugin, VuePlugin];
 }
 
 // node/vite/index.ts
@@ -2444,7 +2701,7 @@ function ViteSlidevPlugin(options, pluginOptions = {}, serverOptions = {}) {
     createVueCompilerFlagsPlugin(options),
     createUnocssPlugin(options, pluginOptions),
     createStaticCopyPlugin(options, pluginOptions),
-    createInspectPlugin(options, pluginOptions)
+    createInspectPlugin(options, pluginOptions),
   ]);
 }
 
@@ -2457,18 +2714,22 @@ function getSlideTitle(data) {
   const slideTitle = data.config.titleTemplate.replace("%s", title);
   return slideTitle === "Slidev - Slidev" ? "Slidev" : slideTitle;
 }
-async function resolveViteConfigs(options, baseConfig, overrideConfigs, command, serverOptions) {
+async function resolveViteConfigs(
+  options,
+  baseConfig,
+  overrideConfigs,
+  command,
+  serverOptions
+) {
   const configEnv = {
     mode: command === "build" ? "production" : "development",
-    command
+    command,
   };
   const files = options.roots.map((i) => join12(i, "vite.config.ts"));
   for (const file of files) {
-    if (!existsSync7(file))
-      continue;
+    if (!existsSync7(file)) continue;
     const viteConfig = await loadConfigFromFile(configEnv, file);
-    if (!viteConfig?.config)
-      continue;
+    if (!viteConfig?.config) continue;
     baseConfig = mergeConfig2(baseConfig, viteConfig.config);
   }
   baseConfig = mergeConfig2(baseConfig, overrideConfigs);
@@ -2478,8 +2739,8 @@ async function resolveViteConfigs(options, baseConfig, overrideConfigs, command,
     plugins: await ViteSlidevPlugin(options, baseConfig.slidev, serverOptions),
     define: {
       // Fixes Vue production mode breaking PDF Export #1245
-      __VUE_PROD_DEVTOOLS__: false
-    }
+      __VUE_PROD_DEVTOOLS__: false,
+    },
   });
   return baseConfig;
 }
@@ -2495,21 +2756,32 @@ function setupIndexHtml({ mode, entry, clientRoot, userRoot, roots, data }) {
   const { info, author, keywords } = data.headmatter;
   head += [
     `<meta name="slidev:version" content="${version}">`,
-    mode === "dev" && `<meta charset="slidev:entry" content="${slash4(entry)}">`,
+    mode === "dev" &&
+      `<meta charset="slidev:entry" content="${slash4(entry)}">`,
     `<link rel="icon" href="${data.config.favicon}">`,
     `<title>${getSlideTitle(data)}</title>`,
     info && `<meta name="description" content=${toAttrValue(info)}>`,
     author && `<meta name="author" content=${toAttrValue(author)}>`,
-    keywords && `<meta name="keywords" content=${toAttrValue(Array.isArray(keywords) ? keywords.join(", ") : keywords)}>`
-  ].filter(Boolean).join("\n");
+    keywords &&
+      `<meta name="keywords" content=${toAttrValue(Array.isArray(keywords) ? keywords.join(", ") : keywords)}>`,
+  ]
+    .filter(Boolean)
+    .join("\n");
   for (const root of roots) {
     const path4 = join13(root, "index.html");
-    if (!existsSync8(path4))
-      continue;
+    if (!existsSync8(path4)) continue;
     const index = readFileSync2(path4, "utf-8");
     if (root === userRoot && index.includes("<!DOCTYPE")) {
-      console.error(yellow2(`[Slidev] Ignored provided index.html with doctype declaration. (${white(path4)})`));
-      console.error(yellow2("This file may be generated by Slidev, please remove it from your project."));
+      console.error(
+        yellow2(
+          `[Slidev] Ignored provided index.html with doctype declaration. (${white(path4)})`
+        )
+      );
+      console.error(
+        yellow2(
+          "This file may be generated by Slidev, please remove it from your project."
+        )
+      );
       continue;
     }
     head += `
@@ -2518,13 +2790,23 @@ ${(index.match(/<head>([\s\S]*?)<\/head>/i)?.[1] || "").trim()}`;
 ${(index.match(/<body>([\s\S]*?)<\/body>/i)?.[1] || "").trim()}`;
   }
   if (data.features.tweet)
-    body += '\n<script async src="https://platform.twitter.com/widgets.js"></script>';
-  if (data.config.fonts.webfonts.length && data.config.fonts.provider !== "none")
+    body +=
+      '\n<script async src="https://platform.twitter.com/widgets.js"></script>';
+  if (
+    data.config.fonts.webfonts.length &&
+    data.config.fonts.provider !== "none"
+  )
     head += `
 <link rel="stylesheet" href="${generateGoogleFontsUrl(data.config.fonts)}" type="text/css">`;
   if (data.headmatter.lang)
-    main = main.replace('<html lang="en">', `<html lang="${data.headmatter.lang}">`);
-  main = main.replace("__ENTRY__", toAtFS(join13(clientRoot, "main.ts"))).replace("<!-- head -->", head).replace("<!-- body -->", body);
+    main = main.replace(
+      '<html lang="en">',
+      `<html lang="${data.headmatter.lang}">`
+    );
+  main = main
+    .replace("__ENTRY__", toAtFS(join13(clientRoot, "main.ts")))
+    .replace("<!-- head -->", head)
+    .replace("<!-- body -->", body);
   return main;
 }
 
@@ -2534,45 +2816,51 @@ import { bundledLanguages, createHighlighter } from "shiki";
 var cachedRoots;
 var cachedShiki;
 async function setupShiki(roots) {
-  if (cachedRoots === roots)
-    return cachedShiki;
+  if (cachedRoots === roots) return cachedShiki;
   cachedShiki?.shiki.dispose();
-  const options = await loadSetups(
-    roots,
-    "shiki.ts",
-    [{
+  const options = await loadSetups(roots, "shiki.ts", [
+    {
       /** @deprecated */
       async loadTheme(path4) {
-        console.warn("[slidev] `loadTheme` in `setup/shiki.ts` is deprecated. Pass directly the theme name it's supported by Shiki. For custom themes, load it manually via `JSON.parse(fs.readFileSync(path, 'utf-8'))` and pass the raw JSON object instead.");
+        console.warn(
+          "[slidev] `loadTheme` in `setup/shiki.ts` is deprecated. Pass directly the theme name it's supported by Shiki. For custom themes, load it manually via `JSON.parse(fs.readFileSync(path, 'utf-8'))` and pass the raw JSON object instead."
+        );
         return JSON.parse(await fs9.readFile(path4, "utf-8"));
-      }
-    }]
-  );
+      },
+    },
+  ]);
   const mergedOptions = Object.assign({}, ...options);
   if ("theme" in mergedOptions && "themes" in mergedOptions)
     delete mergedOptions.theme;
-  if (mergedOptions.theme && typeof mergedOptions.theme !== "string" && !mergedOptions.theme.name && !mergedOptions.theme.tokenColors) {
+  if (
+    mergedOptions.theme &&
+    typeof mergedOptions.theme !== "string" &&
+    !mergedOptions.theme.name &&
+    !mergedOptions.theme.tokenColors
+  ) {
     mergedOptions.themes = mergedOptions.theme;
     delete mergedOptions.theme;
   }
   if (!mergedOptions.theme && !mergedOptions.themes) {
     mergedOptions.themes = {
       dark: "vitesse-dark",
-      light: "vitesse-light"
+      light: "vitesse-light",
     };
   }
-  if (mergedOptions.themes)
-    mergedOptions.defaultColor = false;
+  if (mergedOptions.themes) mergedOptions.defaultColor = false;
   const shiki = await createHighlighter({
     ...mergedOptions,
     langs: mergedOptions.langs ?? Object.keys(bundledLanguages),
-    themes: "themes" in mergedOptions ? Object.values(mergedOptions.themes) : [mergedOptions.theme]
+    themes:
+      "themes" in mergedOptions
+        ? Object.values(mergedOptions.themes)
+        : [mergedOptions.theme],
   });
   cachedRoots = roots;
-  return cachedShiki = {
+  return (cachedShiki = {
     shiki,
-    shikiOptions: mergedOptions
-  };
+    shikiOptions: mergedOptions,
+  });
 }
 
 // node/options.ts
@@ -2586,11 +2874,14 @@ async function resolveOptions(entryOptions, mode) {
   const [theme, themeRoot] = await resolveTheme(themeRaw, entry);
   const themeRoots = themeRoot ? [themeRoot] : [];
   const themeMeta = themeRoot ? await getThemeMeta(theme, themeRoot) : void 0;
-  const config = parser.resolveConfig(loaded.headmatter, themeMeta, entryOptions.entry);
+  const config = parser.resolveConfig(
+    loaded.headmatter,
+    themeMeta,
+    entryOptions.entry
+  );
   const addonRoots = await resolveAddons(config.addons);
   const roots = uniq5([...themeRoots, ...addonRoots, rootsInfo.userRoot]);
-  if (entryOptions.download)
-    config.download ||= entryOptions.download;
+  if (entryOptions.download) config.download ||= entryOptions.download;
   debug({
     ...rootsInfo,
     ...entryOptions,
@@ -2601,12 +2892,12 @@ async function resolveOptions(entryOptions, mode) {
     theme,
     themeRoots,
     addonRoots,
-    roots
+    roots,
   });
   const data = {
     ...loaded,
     config,
-    themeMeta
+    themeMeta,
   };
   const resolved = {
     ...rootsInfo,
@@ -2618,33 +2909,35 @@ async function resolveOptions(entryOptions, mode) {
     theme,
     themeRoots,
     addonRoots,
-    roots
+    roots,
   };
   return {
     ...resolved,
-    utils: await createDataUtils(resolved)
+    utils: await createDataUtils(resolved),
   };
 }
 async function createDataUtils(resolved) {
-  const monacoTypesIgnorePackagesMatches = (resolved.data.config.monacoTypesIgnorePackages || []).map((i) => mm.matcher(i));
+  const monacoTypesIgnorePackagesMatches = (
+    resolved.data.config.monacoTypesIgnorePackages || []
+  ).map((i) => mm.matcher(i));
   let _layouts_cache_time = 0;
   let _layouts_cache = {};
   return {
-    ...await setupShiki(resolved.roots),
+    ...(await setupShiki(resolved.roots)),
     indexHtml: setupIndexHtml(resolved),
     define: getDefine(resolved),
     iconsResolvePath: [resolved.clientRoot, ...resolved.roots].reverse(),
-    isMonacoTypesIgnored: (pkg) => monacoTypesIgnorePackagesMatches.some((i) => i(pkg)),
+    isMonacoTypesIgnored: (pkg) =>
+      monacoTypesIgnorePackagesMatches.some((i) => i(pkg)),
     getLayouts: () => {
       const now = Date.now();
-      if (now - _layouts_cache_time < 2e3)
-        return _layouts_cache;
+      if (now - _layouts_cache_time < 2e3) return _layouts_cache;
       const layouts = {};
       for (const root of [resolved.clientRoot, ...resolved.roots]) {
         const layoutPaths = fg4.sync("layouts/**/*.{vue,ts}", {
           cwd: root,
           absolute: true,
-          suppressErrors: true
+          suppressErrors: true,
         });
         for (const layoutPath of layoutPaths) {
           const layoutName = path3.basename(layoutPath).replace(/\.\w+$/, "");
@@ -2654,7 +2947,7 @@ async function createDataUtils(resolved) {
       _layouts_cache_time = now;
       _layouts_cache = layouts;
       return layouts;
-    }
+    },
   };
 }
 function getDefine(options) {
@@ -2664,15 +2957,24 @@ function getDefine(options) {
       __DEV__: options.mode === "dev",
       __SLIDEV_CLIENT_ROOT__: toAtFS(options.clientRoot),
       __SLIDEV_HASH_ROUTE__: options.data.config.routerMode === "hash",
-      __SLIDEV_FEATURE_DRAWINGS__: matchMode(options.data.config.drawings.enabled),
-      __SLIDEV_FEATURE_EDITOR__: options.mode === "dev" && options.data.config.editor !== false,
-      __SLIDEV_FEATURE_DRAWINGS_PERSIST__: !!options.data.config.drawings.persist,
+      __SLIDEV_FEATURE_DRAWINGS__: matchMode(
+        options.data.config.drawings.enabled
+      ),
+      __SLIDEV_FEATURE_EDITOR__:
+        options.mode === "dev" && options.data.config.editor !== false,
+      __SLIDEV_FEATURE_DRAWINGS_PERSIST__:
+        !!options.data.config.drawings.persist,
       __SLIDEV_FEATURE_RECORD__: matchMode(options.data.config.record),
       __SLIDEV_FEATURE_PRESENTER__: matchMode(options.data.config.presenter),
-      __SLIDEV_FEATURE_PRINT__: options.mode === "export" || options.mode === "build" && [true, "true", "auto"].includes(options.data.config.download),
-      __SLIDEV_FEATURE_BROWSER_EXPORTER__: matchMode(options.data.config.browserExporter),
+      __SLIDEV_FEATURE_PRINT__:
+        options.mode === "export" ||
+        (options.mode === "build" &&
+          [true, "true", "auto"].includes(options.data.config.download)),
+      __SLIDEV_FEATURE_BROWSER_EXPORTER__: matchMode(
+        options.data.config.browserExporter
+      ),
       __SLIDEV_FEATURE_WAKE_LOCK__: matchMode(options.data.config.wakeLock),
-      __SLIDEV_HAS_SERVER__: options.mode !== "build"
+      __SLIDEV_HAS_SERVER__: options.mode !== "build",
     },
     (v, k) => [v, JSON.stringify(k)]
   );
@@ -2688,5 +2990,5 @@ export {
   resolveOptions,
   createDataUtils,
   ViteSlidevPlugin,
-  resolveViteConfigs
+  resolveViteConfigs,
 };
